// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "ccReg.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



void
ccReg::Address_Type::operator>>= (cdrStream &_n) const
{
  _n.marshalString(address,0);
  type >>= _n;

}

void
ccReg::Address_Type::operator<<= (cdrStream &_n)
{
  address = _n.unmarshalString(0);
  (CORBA::Short&)type <<= _n;

}

void
ccReg::NameServer_Type::operator>>= (cdrStream &_n) const
{
  _n.marshalString(name,0);

}

void
ccReg::NameServer_Type::operator<<= (cdrStream &_n)
{
  name = _n.unmarshalString(0);

}

void
ccReg::Contact::operator>>= (cdrStream &_n) const
{
  _n.marshalString(ROID,0);
  _n.marshalString(ClID,0);
  _n.marshalString(CrID,0);
  _n.marshalString(UpID,0);
  CrDate >>= _n;
  UpDate >>= _n;
  TrDate >>= _n;
  _n.marshalString(Name,0);
  _n.marshalString(Organization,0);
  _n.marshalString(Street1,0);
  _n.marshalString(Street2,0);
  _n.marshalString(Street3,0);
  _n.marshalString(City,0);
  _n.marshalString(StateOrProvince,0);
  _n.marshalString(PostalCode,0);
  {
    _n.declareArrayLength(omni::ALIGN_1, 2);
    for (CORBA::ULong _0i0 = 0; _0i0 < 2; _0i0++){
      _n.marshalChar(Country[_0i0]);
    }
  }
  _n.marshalString(Telephone,0);
  _n.marshalString(Fax,0);
  _n.marshalString(Email,0);
  _n.marshalString(NotifyEmail,0);
  _n.marshalString(VAT,0);
  {
    _n.declareArrayLength(omni::ALIGN_1, 32);
    for (CORBA::ULong _0i0 = 0; _0i0 < 32; _0i0++){
      _n.marshalChar(AuthInfoPw[_0i0]);
    }
  }
  _n.marshalBoolean(DiscloseName);
  _n.marshalBoolean(DiscloseOrganization);
  _n.marshalBoolean(DiscloseAddress);
  _n.marshalBoolean(DiscloseTelephone);
  _n.marshalBoolean(DiscloseFax);
  _n.marshalBoolean(DiscloseEmail);

}

void
ccReg::Contact::operator<<= (cdrStream &_n)
{
  ROID = _n.unmarshalString(0);
  ClID = _n.unmarshalString(0);
  CrID = _n.unmarshalString(0);
  UpID = _n.unmarshalString(0);
  (timestamp&)CrDate <<= _n;
  (timestamp&)UpDate <<= _n;
  (timestamp&)TrDate <<= _n;
  Name = _n.unmarshalString(0);
  Organization = _n.unmarshalString(0);
  Street1 = _n.unmarshalString(0);
  Street2 = _n.unmarshalString(0);
  Street3 = _n.unmarshalString(0);
  City = _n.unmarshalString(0);
  StateOrProvince = _n.unmarshalString(0);
  PostalCode = _n.unmarshalString(0);
  {
    for (CORBA::ULong _0i0 = 0; _0i0 < 2; _0i0++){
      Country[_0i0] = _n.unmarshalChar();
    }
  }
  Telephone = _n.unmarshalString(0);
  Fax = _n.unmarshalString(0);
  Email = _n.unmarshalString(0);
  NotifyEmail = _n.unmarshalString(0);
  VAT = _n.unmarshalString(0);
  {
    for (CORBA::ULong _0i0 = 0; _0i0 < 32; _0i0++){
      AuthInfoPw[_0i0] = _n.unmarshalChar();
    }
  }
  DiscloseName = _n.unmarshalBoolean();
  DiscloseOrganization = _n.unmarshalBoolean();
  DiscloseAddress = _n.unmarshalBoolean();
  DiscloseTelephone = _n.unmarshalBoolean();
  DiscloseFax = _n.unmarshalBoolean();
  DiscloseEmail = _n.unmarshalBoolean();

}

ccReg::EPP_ptr ccReg::EPP_Helper::_nil() {
  return ::ccReg::EPP::_nil();
}

CORBA::Boolean ccReg::EPP_Helper::is_nil(::ccReg::EPP_ptr p) {
  return CORBA::is_nil(p);

}

void ccReg::EPP_Helper::release(::ccReg::EPP_ptr p) {
  CORBA::release(p);
}

void ccReg::EPP_Helper::marshalObjRef(::ccReg::EPP_ptr obj, cdrStream& s) {
  ::ccReg::EPP::_marshalObjRef(obj, s);
}

ccReg::EPP_ptr ccReg::EPP_Helper::unmarshalObjRef(cdrStream& s) {
  return ::ccReg::EPP::_unmarshalObjRef(s);
}

void ccReg::EPP_Helper::duplicate(::ccReg::EPP_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

ccReg::EPP_ptr
ccReg::EPP::_duplicate(::ccReg::EPP_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

ccReg::EPP_ptr
ccReg::EPP::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


ccReg::EPP_ptr
ccReg::EPP::_unchecked_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

ccReg::EPP_ptr
ccReg::EPP::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_EPP _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_EPP* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_EPP;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* ccReg::EPP::_PD_repoId = "IDL:ccReg/EPP:1.0";


ccReg::_objref_EPP::~_objref_EPP() {
  
}


ccReg::_objref_EPP::_objref_EPP(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::ccReg::EPP::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
ccReg::_objref_EPP::_ptrToObjRef(const char* id)
{
  if( id == ::ccReg::EPP::_PD_repoId )
    return (::ccReg::EPP_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::ccReg::EPP::_PD_repoId) )
    return (::ccReg::EPP_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cshort_i_cstring_i_cstring_i_cstring_o_cstring_o_cstring
class _0RL_cd_728B2C0DC8F0283E_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_728B2C0DC8F0283E_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  CORBA::String_var arg_0_;
  const char* arg_0;
  CORBA::String_var arg_1_;
  const char* arg_1;
  CORBA::String_var arg_2_;
  const char* arg_2;
  CORBA::String_var arg_3;
  CORBA::String_var arg_4;
  ccReg::Response result;
};

void _0RL_cd_728B2C0DC8F0283E_00000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  _n.marshalString(arg_2,0);

}

void _0RL_cd_728B2C0DC8F0283E_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalString(0);
  arg_2 = arg_2_.in();

}

void _0RL_cd_728B2C0DC8F0283E_00000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;
  _n.marshalString(arg_3,0);
  _n.marshalString(arg_4,0);

}

void _0RL_cd_728B2C0DC8F0283E_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  (ccReg::Response&)result <<= _n;
  arg_3 = _n.unmarshalString(0);
  arg_4 = _n.unmarshalString(0);

}

// Local call call-back function.
static void
_0RL_lcfn_728B2C0DC8F0283E_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_728B2C0DC8F0283E_00000000* tcd = (_0RL_cd_728B2C0DC8F0283E_00000000*)cd;
  ccReg::_impl_EPP* impl = (ccReg::_impl_EPP*) svnt->_ptrToInterface(ccReg::EPP::_PD_repoId);
  tcd->result = impl->Login(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3.out(), tcd->arg_4.out());


}

ccReg::Response ccReg::_objref_EPP::Login(const char* clientID, const char* pass, const char* clTRID, CORBA::String_out errMsg, CORBA::String_out svTRID)
{
  _0RL_cd_728B2C0DC8F0283E_00000000 _call_desc(_0RL_lcfn_728B2C0DC8F0283E_10000000, "Login", 6);
  _call_desc.arg_0 = clientID;
  _call_desc.arg_1 = pass;
  _call_desc.arg_2 = clTRID;

  _invoke(_call_desc);
  errMsg = _call_desc.arg_3._retn();
  svTRID = _call_desc.arg_4._retn();
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cshort_i_cstring_o_cstring_o_cstring
class _0RL_cd_728B2C0DC8F0283E_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_728B2C0DC8F0283E_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  CORBA::String_var arg_0_;
  const char* arg_0;
  CORBA::String_var arg_1;
  CORBA::String_var arg_2;
  ccReg::Response result;
};

void _0RL_cd_728B2C0DC8F0283E_20000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_728B2C0DC8F0283E_20000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_728B2C0DC8F0283E_20000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;
  _n.marshalString(arg_1,0);
  _n.marshalString(arg_2,0);

}

void _0RL_cd_728B2C0DC8F0283E_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  (ccReg::Response&)result <<= _n;
  arg_1 = _n.unmarshalString(0);
  arg_2 = _n.unmarshalString(0);

}

// Local call call-back function.
static void
_0RL_lcfn_728B2C0DC8F0283E_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_728B2C0DC8F0283E_20000000* tcd = (_0RL_cd_728B2C0DC8F0283E_20000000*)cd;
  ccReg::_impl_EPP* impl = (ccReg::_impl_EPP*) svnt->_ptrToInterface(ccReg::EPP::_PD_repoId);
  tcd->result = impl->Logout(tcd->arg_0, tcd->arg_1.out(), tcd->arg_2.out());


}

ccReg::Response ccReg::_objref_EPP::Logout(const char* clTRID, CORBA::String_out errMsg, CORBA::String_out svTRID)
{
  _0RL_cd_728B2C0DC8F0283E_20000000 _call_desc(_0RL_lcfn_728B2C0DC8F0283E_30000000, "Logout", 7);
  _call_desc.arg_0 = clTRID;

  _invoke(_call_desc);
  errMsg = _call_desc.arg_1._retn();
  svTRID = _call_desc.arg_2._retn();
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cshort_i_cstring_i_cstring_o_cstring_o_cstring
class _0RL_cd_728B2C0DC8F0283E_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_728B2C0DC8F0283E_40000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  CORBA::String_var arg_0_;
  const char* arg_0;
  CORBA::String_var arg_1_;
  const char* arg_1;
  CORBA::String_var arg_2;
  CORBA::String_var arg_3;
  ccReg::Response result;
};

void _0RL_cd_728B2C0DC8F0283E_40000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_728B2C0DC8F0283E_40000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_728B2C0DC8F0283E_40000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;
  _n.marshalString(arg_2,0);
  _n.marshalString(arg_3,0);

}

void _0RL_cd_728B2C0DC8F0283E_40000000::unmarshalReturnedValues(cdrStream& _n)
{
  (ccReg::Response&)result <<= _n;
  arg_2 = _n.unmarshalString(0);
  arg_3 = _n.unmarshalString(0);

}

// Local call call-back function.
static void
_0RL_lcfn_728B2C0DC8F0283E_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_728B2C0DC8F0283E_40000000* tcd = (_0RL_cd_728B2C0DC8F0283E_40000000*)cd;
  ccReg::_impl_EPP* impl = (ccReg::_impl_EPP*) svnt->_ptrToInterface(ccReg::EPP::_PD_repoId);
  tcd->result = impl->ContactCheck(tcd->arg_0, tcd->arg_1, tcd->arg_2.out(), tcd->arg_3.out());


}

ccReg::Response ccReg::_objref_EPP::ContactCheck(const char* roid, const char* clTRID, CORBA::String_out errMsg, CORBA::String_out svTRID)
{
  _0RL_cd_728B2C0DC8F0283E_40000000 _call_desc(_0RL_lcfn_728B2C0DC8F0283E_50000000, "ContactCheck", 13);
  _call_desc.arg_0 = roid;
  _call_desc.arg_1 = clTRID;

  _invoke(_call_desc);
  errMsg = _call_desc.arg_2._retn();
  svTRID = _call_desc.arg_3._retn();
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cshort_i_cstring_i_cstring_o_cccReg_mContact_o_cstring_o_cstring
class _0RL_cd_728B2C0DC8F0283E_60000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_728B2C0DC8F0283E_60000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  CORBA::String_var arg_0_;
  const char* arg_0;
  CORBA::String_var arg_1_;
  const char* arg_1;
  ccReg::Contact_var arg_2;
  CORBA::String_var arg_3;
  CORBA::String_var arg_4;
  ccReg::Response result;
};

void _0RL_cd_728B2C0DC8F0283E_60000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_728B2C0DC8F0283E_60000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_728B2C0DC8F0283E_60000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;
  (const ccReg::Contact&) arg_2 >>= _n;
  _n.marshalString(arg_3,0);
  _n.marshalString(arg_4,0);

}

void _0RL_cd_728B2C0DC8F0283E_60000000::unmarshalReturnedValues(cdrStream& _n)
{
  (ccReg::Response&)result <<= _n;
  arg_2 = new ccReg::Contact;
  (ccReg::Contact&)arg_2 <<= _n;
  arg_3 = _n.unmarshalString(0);
  arg_4 = _n.unmarshalString(0);

}

// Local call call-back function.
static void
_0RL_lcfn_728B2C0DC8F0283E_70000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_728B2C0DC8F0283E_60000000* tcd = (_0RL_cd_728B2C0DC8F0283E_60000000*)cd;
  ccReg::_impl_EPP* impl = (ccReg::_impl_EPP*) svnt->_ptrToInterface(ccReg::EPP::_PD_repoId);
  tcd->result = impl->ContactInfo(tcd->arg_0, tcd->arg_1, tcd->arg_2.out(), tcd->arg_3.out(), tcd->arg_4.out());


}

ccReg::Response ccReg::_objref_EPP::ContactInfo(const char* roid, const char* clTRID, Contact_out c, CORBA::String_out errMsg, CORBA::String_out svTRID)
{
  _0RL_cd_728B2C0DC8F0283E_60000000 _call_desc(_0RL_lcfn_728B2C0DC8F0283E_70000000, "ContactInfo", 12);
  _call_desc.arg_0 = roid;
  _call_desc.arg_1 = clTRID;

  _invoke(_call_desc);
  c = _call_desc.arg_2._retn();
  errMsg = _call_desc.arg_3._retn();
  svTRID = _call_desc.arg_4._retn();
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_728B2C0DC8F0283E_80000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_728B2C0DC8F0283E_40000000* tcd = (_0RL_cd_728B2C0DC8F0283E_40000000*)cd;
  ccReg::_impl_EPP* impl = (ccReg::_impl_EPP*) svnt->_ptrToInterface(ccReg::EPP::_PD_repoId);
  tcd->result = impl->ContactDelete(tcd->arg_0, tcd->arg_1, tcd->arg_2.out(), tcd->arg_3.out());


}

ccReg::Response ccReg::_objref_EPP::ContactDelete(const char* roid, const char* clTRID, CORBA::String_out errMsg, CORBA::String_out svTRID)
{
  _0RL_cd_728B2C0DC8F0283E_40000000 _call_desc(_0RL_lcfn_728B2C0DC8F0283E_80000000, "ContactDelete", 14);
  _call_desc.arg_0 = roid;
  _call_desc.arg_1 = clTRID;

  _invoke(_call_desc);
  errMsg = _call_desc.arg_2._retn();
  svTRID = _call_desc.arg_3._retn();
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cshort_i_cccReg_mContact_i_cstring_o_cstring_o_cstring
class _0RL_cd_728B2C0DC8F0283E_90000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_728B2C0DC8F0283E_90000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ccReg::Contact_var arg_0_;
  const ccReg::Contact* arg_0;
  CORBA::String_var arg_1_;
  const char* arg_1;
  CORBA::String_var arg_2;
  CORBA::String_var arg_3;
  ccReg::Response result;
};

void _0RL_cd_728B2C0DC8F0283E_90000000::marshalArguments(cdrStream& _n)
{
  (const ccReg::Contact&) *arg_0 >>= _n;
  _n.marshalString(arg_1,0);

}

void _0RL_cd_728B2C0DC8F0283E_90000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new ccReg::Contact;
  (ccReg::Contact&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_728B2C0DC8F0283E_90000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;
  _n.marshalString(arg_2,0);
  _n.marshalString(arg_3,0);

}

void _0RL_cd_728B2C0DC8F0283E_90000000::unmarshalReturnedValues(cdrStream& _n)
{
  (ccReg::Response&)result <<= _n;
  arg_2 = _n.unmarshalString(0);
  arg_3 = _n.unmarshalString(0);

}

// Local call call-back function.
static void
_0RL_lcfn_728B2C0DC8F0283E_a0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_728B2C0DC8F0283E_90000000* tcd = (_0RL_cd_728B2C0DC8F0283E_90000000*)cd;
  ccReg::_impl_EPP* impl = (ccReg::_impl_EPP*) svnt->_ptrToInterface(ccReg::EPP::_PD_repoId);
  tcd->result = impl->ContactUpdate(*tcd->arg_0, tcd->arg_1, tcd->arg_2.out(), tcd->arg_3.out());


}

ccReg::Response ccReg::_objref_EPP::ContactUpdate(const Contact& c, const char* clTRID, CORBA::String_out errMsg, CORBA::String_out svTRID)
{
  _0RL_cd_728B2C0DC8F0283E_90000000 _call_desc(_0RL_lcfn_728B2C0DC8F0283E_a0000000, "ContactUpdate", 14);
  _call_desc.arg_0 = &(Contact&) c;
  _call_desc.arg_1 = clTRID;

  _invoke(_call_desc);
  errMsg = _call_desc.arg_2._retn();
  svTRID = _call_desc.arg_3._retn();
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_728B2C0DC8F0283E_b0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_728B2C0DC8F0283E_90000000* tcd = (_0RL_cd_728B2C0DC8F0283E_90000000*)cd;
  ccReg::_impl_EPP* impl = (ccReg::_impl_EPP*) svnt->_ptrToInterface(ccReg::EPP::_PD_repoId);
  tcd->result = impl->ContactCreate(*tcd->arg_0, tcd->arg_1, tcd->arg_2.out(), tcd->arg_3.out());


}

ccReg::Response ccReg::_objref_EPP::ContactCreate(const Contact& c, const char* clTRID, CORBA::String_out errMsg, CORBA::String_out svTRID)
{
  _0RL_cd_728B2C0DC8F0283E_90000000 _call_desc(_0RL_lcfn_728B2C0DC8F0283E_b0000000, "ContactCreate", 14);
  _call_desc.arg_0 = &(Contact&) c;
  _call_desc.arg_1 = clTRID;

  _invoke(_call_desc);
  errMsg = _call_desc.arg_2._retn();
  svTRID = _call_desc.arg_3._retn();
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cstring
class _0RL_cd_728B2C0DC8F0283E_c0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_728B2C0DC8F0283E_c0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  CORBA::String_var result;
};

void _0RL_cd_728B2C0DC8F0283E_c0000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalString(result,0);

}

void _0RL_cd_728B2C0DC8F0283E_c0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalString(0);

}

// Local call call-back function.
static void
_0RL_lcfn_728B2C0DC8F0283E_d0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_728B2C0DC8F0283E_c0000000* tcd = (_0RL_cd_728B2C0DC8F0283E_c0000000*)cd;
  ccReg::_impl_EPP* impl = (ccReg::_impl_EPP*) svnt->_ptrToInterface(ccReg::EPP::_PD_repoId);
  tcd->result = impl->clientID();


}

char* ccReg::_objref_EPP::clientID()
{
  _0RL_cd_728B2C0DC8F0283E_c0000000 _call_desc(_0RL_lcfn_728B2C0DC8F0283E_d0000000, "_get_clientID", 14);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
ccReg::_pof_EPP::~_pof_EPP() {}


omniObjRef*
ccReg::_pof_EPP::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::ccReg::_objref_EPP(ior, id);
}


CORBA::Boolean
ccReg::_pof_EPP::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::ccReg::EPP::_PD_repoId) )
    return 1;
  
  return 0;
}

const ccReg::_pof_EPP _the_pof_ccReg_mEPP;

ccReg::_impl_EPP::~_impl_EPP() {}


CORBA::Boolean
ccReg::_impl_EPP::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "Login") ) {

    _0RL_cd_728B2C0DC8F0283E_00000000 _call_desc(_0RL_lcfn_728B2C0DC8F0283E_10000000, "Login", 6, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "Logout") ) {

    _0RL_cd_728B2C0DC8F0283E_20000000 _call_desc(_0RL_lcfn_728B2C0DC8F0283E_30000000, "Logout", 7, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "ContactCheck") ) {

    _0RL_cd_728B2C0DC8F0283E_40000000 _call_desc(_0RL_lcfn_728B2C0DC8F0283E_50000000, "ContactCheck", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "ContactInfo") ) {

    _0RL_cd_728B2C0DC8F0283E_60000000 _call_desc(_0RL_lcfn_728B2C0DC8F0283E_70000000, "ContactInfo", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "ContactDelete") ) {

    _0RL_cd_728B2C0DC8F0283E_40000000 _call_desc(_0RL_lcfn_728B2C0DC8F0283E_80000000, "ContactDelete", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "ContactUpdate") ) {

    _0RL_cd_728B2C0DC8F0283E_90000000 _call_desc(_0RL_lcfn_728B2C0DC8F0283E_a0000000, "ContactUpdate", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "ContactCreate") ) {

    _0RL_cd_728B2C0DC8F0283E_90000000 _call_desc(_0RL_lcfn_728B2C0DC8F0283E_b0000000, "ContactCreate", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_clientID") ) {

    _0RL_cd_728B2C0DC8F0283E_c0000000 _call_desc(_0RL_lcfn_728B2C0DC8F0283E_d0000000, "_get_clientID", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
ccReg::_impl_EPP::_ptrToInterface(const char* id)
{
  if( id == ::ccReg::EPP::_PD_repoId )
    return (::ccReg::_impl_EPP*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::ccReg::EPP::_PD_repoId) )
    return (::ccReg::_impl_EPP*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
ccReg::_impl_EPP::_mostDerivedRepoId()
{
  return ::ccReg::EPP::_PD_repoId;
}

void
ccReg::DomainWhois::operator>>= (cdrStream &_n) const
{
  _n.marshalString(name,0);
  _n.marshalString(description,0);
  status >>= _n;
  registered >>= _n;
  expired >>= _n;
  _n.marshalString(registrar,0);
  (const NameServer&) ns >>= _n;

}

void
ccReg::DomainWhois::operator<<= (cdrStream &_n)
{
  name = _n.unmarshalString(0);
  description = _n.unmarshalString(0);
  (CORBA::Short&)status <<= _n;
  (timestamp&)registered <<= _n;
  (timestamp&)expired <<= _n;
  registrar = _n.unmarshalString(0);
  (NameServer&)ns <<= _n;

}

ccReg::Whois_ptr ccReg::Whois_Helper::_nil() {
  return ::ccReg::Whois::_nil();
}

CORBA::Boolean ccReg::Whois_Helper::is_nil(::ccReg::Whois_ptr p) {
  return CORBA::is_nil(p);

}

void ccReg::Whois_Helper::release(::ccReg::Whois_ptr p) {
  CORBA::release(p);
}

void ccReg::Whois_Helper::marshalObjRef(::ccReg::Whois_ptr obj, cdrStream& s) {
  ::ccReg::Whois::_marshalObjRef(obj, s);
}

ccReg::Whois_ptr ccReg::Whois_Helper::unmarshalObjRef(cdrStream& s) {
  return ::ccReg::Whois::_unmarshalObjRef(s);
}

void ccReg::Whois_Helper::duplicate(::ccReg::Whois_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

ccReg::Whois_ptr
ccReg::Whois::_duplicate(::ccReg::Whois_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

ccReg::Whois_ptr
ccReg::Whois::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


ccReg::Whois_ptr
ccReg::Whois::_unchecked_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

ccReg::Whois_ptr
ccReg::Whois::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Whois _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Whois* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Whois;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* ccReg::Whois::_PD_repoId = "IDL:ccReg/Whois:1.0";


ccReg::_objref_Whois::~_objref_Whois() {
  
}


ccReg::_objref_Whois::_objref_Whois(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::ccReg::Whois::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
ccReg::_objref_Whois::_ptrToObjRef(const char* id)
{
  if( id == ::ccReg::Whois::_PD_repoId )
    return (::ccReg::Whois_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::ccReg::Whois::_PD_repoId) )
    return (::ccReg::Whois_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cccReg_mDomainWhois_i_cstring
class _0RL_cd_728B2C0DC8F0283E_e0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_728B2C0DC8F0283E_e0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  CORBA::String_var arg_0_;
  const char* arg_0;
  ccReg::DomainWhois_var result;
};

void _0RL_cd_728B2C0DC8F0283E_e0000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_728B2C0DC8F0283E_e0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_728B2C0DC8F0283E_e0000000::marshalReturnedValues(cdrStream& _n)
{
  (const ccReg::DomainWhois&) result >>= _n;

}

void _0RL_cd_728B2C0DC8F0283E_e0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new ccReg::DomainWhois;
  (ccReg::DomainWhois&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_728B2C0DC8F0283E_f0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_728B2C0DC8F0283E_e0000000* tcd = (_0RL_cd_728B2C0DC8F0283E_e0000000*)cd;
  ccReg::_impl_Whois* impl = (ccReg::_impl_Whois*) svnt->_ptrToInterface(ccReg::Whois::_PD_repoId);
  tcd->result = impl->Domain(tcd->arg_0);


}

ccReg::DomainWhois* ccReg::_objref_Whois::Domain(const char* name)
{
  _0RL_cd_728B2C0DC8F0283E_e0000000 _call_desc(_0RL_lcfn_728B2C0DC8F0283E_f0000000, "Domain", 7);
  _call_desc.arg_0 = name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
ccReg::_pof_Whois::~_pof_Whois() {}


omniObjRef*
ccReg::_pof_Whois::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::ccReg::_objref_Whois(ior, id);
}


CORBA::Boolean
ccReg::_pof_Whois::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::ccReg::Whois::_PD_repoId) )
    return 1;
  
  return 0;
}

const ccReg::_pof_Whois _the_pof_ccReg_mWhois;

ccReg::_impl_Whois::~_impl_Whois() {}


CORBA::Boolean
ccReg::_impl_Whois::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "Domain") ) {

    _0RL_cd_728B2C0DC8F0283E_e0000000 _call_desc(_0RL_lcfn_728B2C0DC8F0283E_f0000000, "Domain", 7, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
ccReg::_impl_Whois::_ptrToInterface(const char* id)
{
  if( id == ::ccReg::Whois::_PD_repoId )
    return (::ccReg::_impl_Whois*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::ccReg::Whois::_PD_repoId) )
    return (::ccReg::_impl_Whois*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
ccReg::_impl_Whois::_mostDerivedRepoId()
{
  return ::ccReg::Whois::_PD_repoId;
}

ccReg::Admin_ptr ccReg::Admin_Helper::_nil() {
  return ::ccReg::Admin::_nil();
}

CORBA::Boolean ccReg::Admin_Helper::is_nil(::ccReg::Admin_ptr p) {
  return CORBA::is_nil(p);

}

void ccReg::Admin_Helper::release(::ccReg::Admin_ptr p) {
  CORBA::release(p);
}

void ccReg::Admin_Helper::marshalObjRef(::ccReg::Admin_ptr obj, cdrStream& s) {
  ::ccReg::Admin::_marshalObjRef(obj, s);
}

ccReg::Admin_ptr ccReg::Admin_Helper::unmarshalObjRef(cdrStream& s) {
  return ::ccReg::Admin::_unmarshalObjRef(s);
}

void ccReg::Admin_Helper::duplicate(::ccReg::Admin_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

ccReg::Admin_ptr
ccReg::Admin::_duplicate(::ccReg::Admin_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

ccReg::Admin_ptr
ccReg::Admin::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


ccReg::Admin_ptr
ccReg::Admin::_unchecked_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

ccReg::Admin_ptr
ccReg::Admin::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Admin _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Admin* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Admin;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* ccReg::Admin::_PD_repoId = "IDL:ccReg/Admin:1.0";


ccReg::_objref_Admin::~_objref_Admin() {
  
}


ccReg::_objref_Admin::_objref_Admin(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::ccReg::Admin::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
ccReg::_objref_Admin::_ptrToObjRef(const char* id)
{
  if( id == ::ccReg::Admin::_PD_repoId )
    return (::ccReg::Admin_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::ccReg::Admin::_PD_repoId) )
    return (::ccReg::Admin_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

ccReg::_pof_Admin::~_pof_Admin() {}


omniObjRef*
ccReg::_pof_Admin::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::ccReg::_objref_Admin(ior, id);
}


CORBA::Boolean
ccReg::_pof_Admin::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::ccReg::Admin::_PD_repoId) )
    return 1;
  
  return 0;
}

const ccReg::_pof_Admin _the_pof_ccReg_mAdmin;

ccReg::_impl_Admin::~_impl_Admin() {}


CORBA::Boolean
ccReg::_impl_Admin::_dispatch(omniCallHandle& _handle)
{
  

  
  return 0;
}

void*
ccReg::_impl_Admin::_ptrToInterface(const char* id)
{
  if( id == ::ccReg::Admin::_PD_repoId )
    return (::ccReg::_impl_Admin*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::ccReg::Admin::_PD_repoId) )
    return (::ccReg::_impl_Admin*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
ccReg::_impl_Admin::_mostDerivedRepoId()
{
  return ::ccReg::Admin::_PD_repoId;
}

POA_ccReg::EPP::~EPP() {}

POA_ccReg::Whois::~Whois() {}

POA_ccReg::Admin::~Admin() {}

