macro(set_default __VARIABLE_NAME __VARIABLE_VALUE)
    if(NOT DEFINED ${__VARIABLE_NAME})
        set(${__VARIABLE_NAME} ${__VARIABLE_VALUE} ${ARGN})
    endif()
endmacro()

macro(set_to_parent_scope_if_exists __VARIABLE_NAME __VARIABLE_VALUE)
    if(${__VARIABLE_NAME})
        set(${__VARIABLE_NAME} ${__VARIABLE_VALUE} PARENT_SCOPE)
    endif()
endmacro()

macro(set_to_parent_scope_recursively __DEPENDENCY)
    # <options> <one_value_args> <multi_value_args>
    cmake_parse_arguments(_ "" "INDENT" "SUFFIXES" ${ARGN})
    string(TOUPPER "${__DEPENDENCY}" _dependency_upper_case)
    foreach(suffix ${__SUFFIXES})
        set_to_parent_scope_if_exists(${_dependency_upper_case}_${suffix} "${${_dependency_upper_case}_${suffix}}")
    endforeach()
    foreach(_dependency_dependency ${${_dependency_upper_case}_DEPENDENCIES})
        set(__INDENT "${__INDENT}\t")
        foreach(suffix ${__SUFFIXES})
            set_to_parent_scope_recursively(${_dependency_dependency} SUFFIXES ${__SUFFIXES} INDENT "${__INDENT}")
        endforeach()
    endforeach()
endmacro()

function(parse_url __URL)
    # https://tools.ietf.org:html/rfc3986#appendix-B
    set(url_regex_part1 "^(([^:/?#]+)://)?((([^:@]+)([^@]+)?@)?([^:/?#]+)(:([^/]+))?)?")
    #                     12              345       6          7         8 9
    #                      ^                ^                  ^         ^
    #                      scheme           login              host      port_with_colon

    string(REGEX MATCH "${url_regex_part1}" tmp "${__URL}")

    set(detected_scheme "${CMAKE_MATCH_2}")

    if(NOT detected_scheme STREQUAL "")
        set(login "${CMAKE_MATCH_5}")
        set(host "${CMAKE_MATCH_7}")
        set(port_with_colon "${CMAKE_MATCH_8}")
        if(login STREQUAL "gitlab-ci-token")
            message(STATUS "gitlab-ci-token in url detected")
            set(type "git" PARENT_SCOPE)
            set(base "git@${host}${port_with_colon}" PARENT_SCOPE)
        else()
            set(type "url" PARENT_SCOPE)
            set(base "${CMAKE_MATCH_0}" PARENT_SCOPE)
        endif()
    else()
        set(host_regex "[A-Za-z0-9.-]+")
        set(path_regex ".*")
        set(git_regex "^((git)@(${host_regex}))(:(${path_regex})?)?$")

        string(REGEX MATCH "${git_regex}" tmp "${__URL}")

        set(detected_url "${CMAKE_MATCH_0}")

        if(NOT detected_url STREQUAL "")
            set(type "git" PARENT_SCOPE)
            set(base "${CMAKE_MATCH_1}" PARENT_SCOPE)
        else()
            set(type "path" PARENT_SCOPE)
            set(base "${__URL}" PARENT_SCOPE)
        endif()
    endif()
endfunction()

function(clone_package)
    # <options> <one_value_args> <multi_value_args>
    cmake_parse_arguments(_ "" "DST_DIR;REPOSITORY;COMMITISH" "" ${ARGN})

    find_program(GIT_PROGRAM git)

    if(NOT GIT_FOUND)
      find_package(Git QUIET)
    endif()
    if(NOT GIT_EXECUTABLE)
      return()
    endif()

    if(NOT EXISTS "${__DST_DIR}")
        message(STATUS "${PACKAGE_NAME}: Missing dependency directory: ${__DST_DIR} ${__REPOSITORY} ${__COMMITISH}")
        message(STATUS "${PACKAGE_NAME}: Cloning dependency: ${__DST_DIR} ${__REPOSITORY} ${__COMMITISH}")
        parse_url("${__REPOSITORY}")
        if(type STREQUAL "path")
            execute_process(
                COMMAND "${GIT_EXECUTABLE}" config remote.origin.url
                RESULT_VARIABLE res ERROR_VARIABLE error
                OUTPUT_VARIABLE remote_origin_url
                WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}")
            if(res)
                message(FATAL_ERROR "git config remote.origin.url failed: ${error}")
            endif()

            parse_url("${remote_origin_url}")
            if(type STREQUAL "git")
                set(repository "${base}:${__REPOSITORY}.git")
            elseif(type STREQUAL "url")
                set(repository "${base}/${__REPOSITORY}.git")
            else()
                message(FATAL_ERROR "git config remote.orgin.url returned unsupported scheme (${type})")
            endif()
            set(repository_autocompleted "${repository}" PARENT_SCOPE)
            message(STATUS "${PACKAGE_NAME}: Dependency repository deduced from git config as: ${repository}")
            message(STATUS "${PACKAGE_NAME}: Cloning dependency (auto-completed): ${__DST_DIR} ${repository} ${__COMMITISH}")
        else()
            set(repository "${__REPOSITORY}")
        endif()

        execute_process(
            COMMAND "${GIT_EXECUTABLE}" -c advice.detachedHead=false clone "${repository}" "${__DST_DIR}" --depth 1 --recurse-submodules --branch "${__COMMITISH}"
            RESULT_VARIABLE res ERROR_VARIABLE error
            WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}")
        if(res)
            message(FATAL_ERROR "${PACKAGE_NAME}: Cloning dependency failed: ${error}")
        endif()
    else()
        message(STATUS "${PACKAGE_NAME}: Found dependency directory: ${__DST_DIR} ${__REPOSITORY} ${__COMMITISH}")
    endif()
endfunction()

function(clone_package_dependency __DEPENDENCY)
    string(TOUPPER "${__DEPENDENCY}" dependency_upper_case)
    clone_package(DST_DIR "${${dependency_upper_case}_DIR}"
                  REPOSITORY "${${dependency_upper_case}_REPOSITORY}"
                  COMMITISH "${${dependency_upper_case}_COMMITISH}")
    if(DEFINED repository_autocompleted)
        set("${dependency_upper_case}_REPOSITORY_AUTOCOMPLETED" "${repository_autocompleted}" PARENT_SCOPE)
    endif()
endfunction()

function(configure_package_dependency __DEPENDENCY)
    # <options> <one_value_args> <multi_value_args>
    cmake_parse_arguments(_ "" "SRC_DIR;METHOD" "" ${ARGN})
    string(TOUPPER "${__DEPENDENCY}" dependency_upper_case)
    if(${dependency_upper_case}_CONFIGURED)
        return()
    endif()
    set(${dependency_upper_case}_CONFIGURED "CONFIGURED" PARENT_SCOPE)
    set_default(__SRC_DIR "${${dependency_upper_case}_DIR}")
    set_default(__METHOD "ADD_SUBDIRECTORY")
    if(__SRC_DIR STREQUAL "")
        message(FATAL_ERROR "cannot add ${__DEPENDENCY}; use -D${dependency_upper_case}_DIR=<path> to specify location of ${__DEPENDENCY}")
        return()
    else()
        if(NOT IS_ABSOLUTE ${__SRC_DIR})
            set(__SRC_DIR "${CMAKE_CURRENT_SOURCE_DIR}/${__SRC_DIR}")
        endif()
        if(NOT EXISTS "${__SRC_DIR}")
            clone_package_dependency(${__DEPENDENCY})
        endif()
        if(__METHOD STREQUAL "ADD_SUBDIRECTORY")
            set_default(${dependency_upper_case}_BUILD TRUE)
            if(${dependency_upper_case}_BUILD)
                if(NOT EXISTS "${__SRC_DIR}/CMakeLists.txt")
                    message(FATAL_ERROR "${__SRC_DIR}/CMakeLists.txt file not found; ${dependency_upper_case}_DIR "
                                        "does not refer location of ${__DEPENDENCY}")
                    return()
                endif()
            endif()
        endif()
    endif()
    message(STATUS "${PACKAGE_NAME}: Found dependency ${__DEPENDENCY}: ${__SRC_DIR}")
    set(${dependency_upper_case}_DIR ${__SRC_DIR} CACHE PATH "Location of ${__DEPENDENCY}")
    set(${dependency_upper_case}_REPOSITORY_AUTOCOMPLETED "${${dependency_upper_case}_REPOSITORY_AUTOCOMPLETED}" PARENT_SCOPE)
    string(TOUPPER "${PACKAGE_NAME}" package_name_upper_case)
    list(APPEND ${package_name_upper_case}_DEPENDENCIES "${__DEPENDENCY}")
    set(${package_name_upper_case}_DEPENDENCIES "${${package_name_upper_case}_DEPENDENCIES}" PARENT_SCOPE)
endfunction()

macro(add_package_dependency __DEPENDENCY)
    # <options> <one_value_args> <multi_value_args>
    cmake_parse_arguments(_ "" "DST_RELATIVE_DIR;METHOD" "" ${ARGN})
    set_default(__METHOD "ADD_SUBDIRECTORY")
    string(TOUPPER "${__DEPENDENCY}" dependency_upper_case)
    if(NOT DEFINED ${dependency_upper_case}_VERSION)
        if(NOT ${dependency_upper_case}_DIR)
            message(FATAL_ERROR "${PACKAGE_NAME}: ${dependency_upper_case}_DIR not set.")
        endif()
        string(TOUPPER "${PACKAGE_NAME}" package_name_upper_case)
        set_default(${package_name_upper_case}_PREFIX ${PACKAGE_TARNAME})
        set_default(${dependency_upper_case}_PREFIX ${${package_name_upper_case}_PREFIX}/${__DST_RELATIVE_DIR})
        message(STATUS "${PACKAGE_NAME}: Adding dependency ${__DEPENDENCY}")
        if(__METHOD STREQUAL "ADD_SUBDIRECTORY")
            set_default(${dependency_upper_case}_BUILD TRUE)
            if(${dependency_upper_case}_BUILD)
                add_subdirectory("${${dependency_upper_case}_DIR}" "${CMAKE_CURRENT_BINARY_DIR}/${__DST_RELATIVE_DIR}" EXCLUDE_FROM_ALL)
            endif()
        elseif(__METHOD STREQUAL "INCLUDE")
            foreach(_includefile "CMakeLists.cmake" "cmake/c++.cmake" "cmake/cpp.cmake" "build/c++.cmake")
                message(STATUS "${PACKAGE_NAME}: Looking for include file \"${${dependency_upper_case}_DIR}/${_includefile}\"...")
                include("${${dependency_upper_case}_DIR}/${_includefile}" OPTIONAL RESULT_VARIABLE _found)
                if(NOT _found STREQUAL "NOTFOUND")
                    message(STATUS "${PACKAGE_NAME}: Successfully included file \"${${dependency_upper_case}_DIR}/${_includefile}\".")
                    provide_package_dependency_dist(${__DEPENDENCY} SRC_DIR "${${dependency_upper_case}_DIR}" DST_RELATIVE_DIR "${__DST_RELATIVE_DIR}")
                    break()
                endif()
            endforeach()
            if(_found STREQUAL "NOTFOUND")
                message(FATAL_ERROR "${PACKAGE_NAME}: Adding dependency ${__DEPENDENCY} failed: include file not found.")
            endif()
        else()
            message(FATAL_ERROR "add_package_dependency: unknown METHOD \"${__METHOD}\"")
        endif()
        set_default(${dependency_upper_case}_VERSION "${${dependency_upper_case}_COMMITISH}")
        message(STATUS "${PACKAGE_NAME}: Added dependency ${__DEPENDENCY} version: ${${dependency_upper_case}_VERSION}")
        get_directory_property(_has_parent "PARENT_DIRECTORY")
        if(_has_parent)
            set_to_parent_scope_recursively(${__DEPENDENCY} SUFFIXES "VERSION;DEPENDENCIES")
        endif()
    else()
        message(STATUS "${PACKAGE_NAME}: ${__DEPENDENCY} already added, version: ${${dependency_upper_case}_VERSION}, ${dependency_upper_case}_DIR: ${${dependency_upper_case}_DIR}")
    endif()
endmacro()

function(parse_dependencies_txt_line __LINE)
    string(REPLACE " " ";" LINE_ITEMS ${__LINE})
    list(GET LINE_ITEMS 0 dependency_repository)
    list(GET LINE_ITEMS 1 dependency_commitish)
    list(GET LINE_ITEMS 2 dependency_clone_path)
    get_filename_component(dependency "${dependency_repository}" NAME)
    string(REGEX REPLACE "${git_regex}" "" dependency "${dependency}")
    string(REGEX MATCH "^.*/api/${dependency}$" is_api "${dependency_repository}")
    if(is_api STREQUAL "")
        set(dependency "${dependency}" PARENT_SCOPE)
        set(method "ADD_SUBDIRECTORY" PARENT_SCOPE)
    else()
        set(dependency "api_${dependency}" PARENT_SCOPE)
        set(method "INCLUDE" PARENT_SCOPE)
    endif()
    set(dependency_repository "${dependency_repository}" PARENT_SCOPE)
    set(dependency_commitish "${dependency_commitish}" PARENT_SCOPE)
    set(dependency_clone_path "${dependency_clone_path}" PARENT_SCOPE)
endfunction()

macro(add_package_dependencies)
    # <options> <one_value_args> <multi_value_args>
    cmake_parse_arguments(_ "" "FROM_FILE" "" ${ARGN})
    if(NOT IS_ABSOLUTE ${__FROM_FILE})
        set(__FROM_FILE "${CMAKE_CURRENT_SOURCE_DIR}/${__FROM_FILE}")
    endif()
    if(NOT EXISTS "${__FROM_FILE}")
        message(FATAL_ERROR "${PACKAGE_NAME}: FROM_FILE \"${__FROM_FILE}\": file not found.")
    endif()
    file(STRINGS ${__FROM_FILE} _LINES REGEX "^[ \t]*[^# \t][^ \t]*[ \t]+[^ \t]+[ \t]+[^ \t].*$")
    set(git_regex "\.git$")
    foreach(LINE ${_LINES})
        parse_dependencies_txt_line("${LINE}")
        string(TOUPPER "${dependency}" dependency_upper_case)
        set(${dependency_upper_case}_REPOSITORY "${dependency_repository}")
        set(${dependency_upper_case}_COMMITISH "${dependency_commitish}")
        set(${dependency_upper_case}_DIR "${CMAKE_CURRENT_SOURCE_DIR}/${dependency_clone_path}" CACHE FILEPATH "Location of ${dependency}")
        set_default(${dependency_upper_case}_METHOD "${method}")
        configure_package_dependency("${dependency}" METHOD "${${dependency_upper_case}_METHOD}")
    endforeach()
    string(TOUPPER "${PACKAGE_NAME}" package_name_upper_case)
    foreach(LINE ${_LINES})
        parse_dependencies_txt_line("${LINE}")
        string(TOUPPER "${dependency}" dependency_upper_case)
        if("${dependency}" IN_LIST ${package_name_upper_case}_DEPENDENCIES)
            add_package_dependency("${dependency}" DST_RELATIVE_DIR "${dependency_clone_path}" METHOD "${${dependency_upper_case}_METHOD}")
        endif()
    endforeach()
    get_directory_property(_has_parent "PARENT_DIRECTORY")
    if(_has_parent)
        set_to_parent_scope_recursively(${package_name_upper_case} SUFFIXES "REPOSITORY;REPOSITORY_AUTOCOMPLETED;COMMITISH;VERSION;DEPENDENCIES")
    endif()
endmacro()

function(provide_package_dependency_dist __DEPENDENCY)
    # <options> <one_value_args> <multi_value_args>
    cmake_parse_arguments(_ "" "SRC_DIR;DST_RELATIVE_DIR" "" ${ARGN})
    string(TOUPPER "${__DEPENDENCY}" dependency_upper_case)
    set_default(__SRC_DIR "${${dependency_upper_case}_DIR}")
    string(REGEX REPLACE "${CMAKE_CURRENT_SOURCE_DIR}/" "" dst_relative_dir "${${dependency_upper_case}_DIR}")
    set_default(__DST_RELATIVE_DIR "${dst_relative_dir}")
    find_program(GIT_PROGRAM git)
    if(EXISTS ${CMAKE_SOURCE_DIR}/.git AND GIT_PROGRAM)
        string(TOUPPER "${PACKAGE_NAME}" package_name_upper_case)
        string(TOLOWER "${__DEPENDENCY}" dependency_lower_case)
        set_default(${package_name_upper_case}_PREFIX "${PACKAGE_TARNAME}")
        if (NOT TARGET dist_${dependency_lower_case})
            add_custom_target(dist_${dependency_lower_case}
                COMMAND ${GIT_PROGRAM} archive --format=tar --prefix=${${package_name_upper_case}_PREFIX}/${__DST_RELATIVE_DIR}/ HEAD > ${CMAKE_BINARY_DIR}/.${dependency_lower_case}.tar
                WORKING_DIRECTORY ${__SRC_DIR}/)
        endif()
    endif()
    string(TOUPPER "${PACKAGE_NAME}" package_name_upper_case)
    if(NOT "${__DEPENDENCY}" IN_LIST ${package_name_upper_case}_DEPENDENCIES)
        list(APPEND ${package_name_upper_case}_DEPENDENCIES "${__DEPENDENCY}")
        set(${package_name_upper_case}_DEPENDENCIES "${${package_name_upper_case}_DEPENDENCIES}" PARENT_SCOPE)
    endif()
endfunction()

function(list_package_dependencies)
    message(STATUS "${PACKAGE_NAME} dependencies:")
    string(TOUPPER "${PACKAGE_NAME}" package_name_upper_case)
    foreach(dependency ${${package_name_upper_case}_DEPENDENCIES})
        message(STATUS "\t${dependency}")
    endforeach()
endfunction()

function(list_package_dependencies_recursive __DEPENDENCY)
    # <options> <one_value_args> <multi_value_args>
    cmake_parse_arguments(_ "" "INDENT" "" ${ARGN})
    string(TOUPPER "${__DEPENDENCY}" dependency_upper_case)
    if(NOT listed_dependencies)
        message(STATUS "${__DEPENDENCY} dependencies (recursive):")
    endif()
    foreach(dependency_dependency ${${dependency_upper_case}_DEPENDENCIES})
        string(TOUPPER "${dependency_dependency}" dependency_dependency_upper_case)
        if(NOT "${${dependency_dependency_upper_case}_REPOSITORY_AUTOCOMPLETED}" STREQUAL "")
            set(repository "${${dependency_dependency_upper_case}_REPOSITORY_AUTOCOMPLETED} (auto-completed)")
            set(commitish "${${dependency_dependency_upper_case}_COMMITISH} (cloned)")
        else()
            set(repository "${${dependency_dependency_upper_case}_REPOSITORY}")
            set(commitish "${${dependency_dependency_upper_case}_COMMITISH} (directory present, commitish not checked)")
        endif()
        if("${dependency_dependency_upper_case}" IN_LIST listed_dependencies)
            message(STATUS "|${__INDENT}-${dependency_dependency}")
        else()
            message(STATUS "|${__INDENT}-${dependency_dependency} (DIR: ${${dependency_dependency_upper_case}_DIR} URL: ${repository} COMMITISH: ${commitish})")
            list(APPEND listed_dependencies "${dependency_dependency_upper_case}")
            set(listed_dependencies "${listed_dependencies}" PARENT_SCOPE)
        endif()
        list_package_dependencies_recursive("${dependency_dependency}" INDENT "${__INDENT}\t")
    endforeach()
endfunction()
