/*
 * Copyright (C) 2013  CZ.NIC, z.s.p.o.
 *
 * This file is part of FRED.
 *
 * FRED is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 2 of the License.
 *
 * FRED is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FRED.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 *  @domain_browser.h
 *  header of domain browser implementation
 */

#ifndef DOMAIN_BROWSER_H_
#define DOMAIN_BROWSER_H_

#include <string>
#include <vector>
#include <boost/date_time/gregorian/gregorian.hpp>
#include <boost/thread/mutex.hpp>

#include "src/fredlib/opexception.h"

#include "cfg/handle_registry_args.h"

namespace Registry
{
    namespace DomainBrowserImpl
    {
        struct RegistrarDetail
        {
            unsigned long long id;
            std::string handle;
            std::string name;
            std::string phone;
            std::string fax;
            std::string url;
            std::string address;
        };

        struct InternalServerError
        : virtual Fred::OperationException
        {
            const char* what() const throw() {return "internal server error";}
        };

        DECLARE_EXCEPTION_DATA(unknown_contact_handle, std::string);/**< exception members for unknown contact handle generated by macro @ref DECLARE_EXCEPTION_DATA*/
        struct UserNotExists
        : virtual Fred::OperationException
        , ExceptionData_unknown_contact_handle<UserNotExists>
        {
            const char* what() const throw() {return "given contact (representing user who is calling the method) does not exist";}
        };

        struct ObjectNotExists
        : virtual Fred::OperationException
        {
            const char* what() const throw() {return "registry object with specified ID does not exist";}
        };

        struct IncorrectUsage
        : virtual Fred::OperationException
        {
            const char* what() const throw() {return "given parameter value (like SortSpec.field or handle) is not valid";}
        };

        struct AccessDenied
        : virtual Fred::OperationException
        {
            const char* what() const throw() {return "given contact (user) does not have access to requested object";}
        };

        struct ObjectBlocked
        : virtual Fred::OperationException
        {
            const char* what() const throw() {return "object has a status that does not allow update";}
        };

        class DomainBrowser
        {
            std::string server_name_;
        public:
            //dummy decl - impl
            DomainBrowser(const std::string &server_name);
            virtual ~DomainBrowser();

            unsigned long long getObjectRegistryId(const std::string& objtype, const std::string& handle);

            RegistrarDetail getRegistrarDetail(const std::string& user_contact_handle, const std::string& registrar_handle);

            std::string get_server_name();
        };//class DomainBrowser

    }//namespace DomainBrowserImpl
}//namespace Registry

#endif // DOMAIN_BROWSER_H_
