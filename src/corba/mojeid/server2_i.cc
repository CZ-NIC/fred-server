/*
 * Copyright (C) 2015  CZ.NIC, z.s.p.o.
 *
 * This file is part of FRED.
 *
 * FRED is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 2 of the License.
 *
 * FRED is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FRED.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 *  @file
 *  implementational code for mojeid2 IDL interface
 *  pregenerated by $> omniidl -bcxx -Wba -Wbexample -C./src/corba ~/workspace/enum/idl/idl/MojeID2.idl
 */

#include "src/corba/mojeid/server2_i.h"

namespace Registry {
namespace MojeID {

Server_i::Server_i(const std::string &_server_name)
{
}

Server_i::~Server_i()
{
}

//   Methods corresponding to IDL attributes and operations
::CORBA::ULongLong Server_i::create_contact_prepare(
    const Registry::MojeID::CreateContact &_contact,
    const char *_trans_id,
    ::CORBA::ULongLong _log_request_id,
    ::CORBA::String_out _identification)
{
    return 0;
}//create_contact_prepare

Registry::MojeID::InfoContact* Server_i::transfer_contact_prepare(
        const char *_handle,
        const char *_trans_id,
        ::CORBA::ULongLong _log_request_id,
        ::CORBA::String_out _identification)
{
    return NULL;
}//transfer_contact_prepare

void Server_i::update_contact_prepared(
        const Registry::MojeID::UpdateContact &_contact,
        const char *_trans_id,
        ::CORBA::ULongLong _log_request_id)
{
}//update_contact_prepared

::CORBA::ULongLong Server_i::process_registration_request(
        const char *ident_request_id,
        const char *password,
        ::CORBA::ULongLong log_request_id)
{
    return 0;
}//processIdentification

void Server_i::process_identification_request(
        ::CORBA::ULongLong contact_id,
        const char *password,
        ::CORBA::ULongLong log_request_id)
{
}

void Server_i::commit_prepared_transaction(
        const char *_trans_id)
{
}//commit_prepared_transaction

void Server_i::rollback_prepared_transaction(
        const char *_trans_id)
{
}//rollback_prepared_transaction

Registry::MojeID::Buffer* Server_i::get_validation_pdf(
        ::CORBA::ULongLong _contact_id)
{
    return NULL;
}//get_validation_pdf

void Server_i::create_validation_request(
        ::CORBA::ULongLong _contact_id,
        ::CORBA::ULongLong _log_request_id)
{
}//create_validation_request

Registry::MojeID::ContactStateInfoList* Server_i::get_contacts_state_changes(
        ::CORBA::ULong _last_hours)
{
    return NULL;
}//get_contacts_state_changes

Registry::MojeID::ContactStateInfo* Server_i::get_contact_state(
        ::CORBA::ULongLong _contact_id)
{
    return NULL;
}//get_contact_state

void Server_i::cancel_contact_account_prepare(
        ::CORBA::ULongLong _contact_id,
        const char *_trans_id,
        ::CORBA::ULongLong _log_request_id)
{
}//cancel_contact_account_prepare

Registry::MojeID::ContactHandleList* Server_i::get_unregistrable_handles(
        ::CORBA::ULong count,
        ::CORBA::ULongLong &start_from)
{
    return NULL;
}//get_unregistrable_handles

void Server_i::send_new_pin3(
      ::CORBA::ULongLong contact_id,
      ::CORBA::ULongLong log_request_id)
{
}

void Server_i::send_mojeid_card(
      ::CORBA::ULongLong contact_id,
      ::CORBA::ULongLong log_request_id)
{
}

::CORBA::ULongLong Server_i::get_contact_id(
        const char *_handle)
{
    return 0;
}//get_contact_id

char* Server_i::get_contact_authinfo(
        ::CORBA::ULongLong contact_id)
{
    return NULL;
}

}//namespace Registry::MojeID
}//namespace Registry
