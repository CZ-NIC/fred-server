/*
 * Copyright (C) 2017  CZ.NIC, z.s.p.o.
 *
 * This file is part of FRED.
 *
 * FRED is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 2 of the License.
 *
 * FRED is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FRED.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 *  @file automatic_keyset_management_i.hh
 *  automatic keyset management corba impl header
 */

//pregenerated by $> omniidl -bcxx -Wba -Wbexample -C./src/corba ~/workspace_18680/enum/idl/idl/RecordStatement.idl

#ifndef AUTOMATIC_KEYSET_MANAGEMENT_I_HH_E1AE9A8DDC2B4A6F863A562B01D09774
#define AUTOMATIC_KEYSET_MANAGEMENT_I_HH_E1AE9A8DDC2B4A6F863A562B01D09774

#include "src/corba/AutomaticKeysetManagement.hh"

#include <boost/shared_ptr.hpp>

#include <string>
#include <vector>

namespace Fred {
namespace AutomaticKeysetManagement {

class AutomaticKeysetManagementImpl; // pimpl class

} // namespace Fred::AutomaticKeysetManagement
} // namespace Fred

namespace Registry {
namespace AutomaticKeysetManagement {

class Server_i: public POA_Registry::AutomaticKeysetManagement::AutomaticKeysetManagementIntf {
public:
    Server_i(
            const std::string& _server_name,
            const std::string& _automatically_managed_keyset_prefix,
            const std::string& _automatically_managed_keyset_registrar,
            const std::string& _automatically_managed_keyset_tech_contact,
            const std::vector<std::string>& _automatically_managed_keyset_zones,
            bool _disable_notifier);

    virtual ~Server_i();

    // methods corresponding to defined IDL attributes and operations
    NameserverDomainsSeq* get_nameservers_with_automatically_managed_domain_candidates();

    NameserverDomainsSeq* get_nameservers_with_automatically_managed_domains();

    void update_domain_automatic_keyset(
            ::CORBA::ULongLong domain_id,
            const Registry::AutomaticKeysetManagement::Nsset& current_nsset,
            const Registry::AutomaticKeysetManagement::Keyset& new_keyset);

    TechContactSeq* get_nsset_notification_emails_by_domain_id(
            ::CORBA::ULongLong domain_id);

private:
    // Make sure all instances are built on the heap by making the
    // destructor non-public
    //virtual ~Registry_AutomaticKeysetManagement_AutomaticKeysetManagementIntf_i();
    // do not copy
    Fred::AutomaticKeysetManagement::AutomaticKeysetManagementImpl* const pimpl_;
    Server_i(const Server_i&);//no body
    Server_i& operator= (const Server_i&);//no body
};

} // namespace Registry::AutomaticKeysetManagement
} // namespace Registry

#endif
