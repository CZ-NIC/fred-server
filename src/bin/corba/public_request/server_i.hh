/*
 * Copyright (C) 2016-2019  CZ.NIC, z. s. p. o.
 *
 * This file is part of FRED.
 *
 * FRED is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * FRED is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FRED.  If not, see <https://www.gnu.org/licenses/>.
 */
/**
*  @server_i.h
*  header of public request corba wrapper
*  pregenerated by $> omniidl -bcxx -Wba -Wbexample -C./src/bin/corba ~/workspace/idl/idl/PublicRequest.idl
*/

#ifndef SERVER_I_HH_4C0DD51687BF47B19E2078C31BF6AA93
#define SERVER_I_HH_4C0DD51687BF47B19E2078C31BF6AA93

#include "src/backend/public_request/exceptions.hh"
#include "src/bin/corba/Buffer.hh"
#include "src/bin/corba/PublicRequest.hh"

#include <memory>
#include <string>

namespace Fred {
namespace Backend {
namespace PublicRequest {

class PublicRequestImpl;

} // Fred::Backend::PublicRequest
} // Fred::Backend
} // Fred

namespace CorbaConversion {

namespace PublicRequest {

class Server_i : public POA_Registry::PublicRequest::PublicRequestIntf
{
public:
    Server_i(const std::string& _server_name);

    virtual ~Server_i();

    CORBA::ULongLong create_authinfo_request_registry_email(
            Registry::PublicRequest::ObjectType_PR::Type object_type,
            const char* object_handle,
            Registry::NullableULongLong* log_request_id);

    CORBA::ULongLong create_authinfo_request_non_registry_email(
            Registry::PublicRequest::ObjectType_PR::Type object_type,
            const char* object_handle,
            Registry::NullableULongLong* log_request_id,
            Registry::PublicRequest::ConfirmedBy::Type confirmation_method,
            const char* specified_email);

    CORBA::ULongLong create_block_unblock_request(
            Registry::PublicRequest::ObjectType_PR::Type object_type,
            const char* object_handle,
            Registry::NullableULongLong* log_request_id,
            Registry::PublicRequest::ConfirmedBy::Type confirmation_method,
            Registry::PublicRequest::LockRequestType::Type lock_request_type);

    CORBA::ULongLong create_personal_info_request_registry_email(
            const char* contact_handle,
            Registry::NullableULongLong* log_request_id);


    CORBA::ULongLong create_personal_info_request_non_registry_email(
            const char* contact_handle,
            Registry::NullableULongLong* log_request_id,
            Registry::PublicRequest::ConfirmedBy::Type confirmation_method,
            const char* specified_email);

    Registry::Buffer* create_public_request_pdf(CORBA::ULongLong public_request_id, Registry::PublicRequest::Language::Type lang);

private:
    Server_i(const Server_i&); // no body
    Server_i& operator=(const Server_i&); // no body
};

} // namespace CorbaConversion::PublicRequest
} // namespace CorbaConversion

#endif
