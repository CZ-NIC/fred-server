/*
 * Copyright (C) 2012-2020  CZ.NIC, z. s. p. o.
 *
 * This file is part of FRED.
 *
 * FRED is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * FRED is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FRED.  If not, see <https://www.gnu.org/licenses/>.
 */
/**
*  @file
*  header of mojeid corba wrapper
*  pregenerated by $> omniidl -bcxx -Wba -Wbexample -C./src/bin/corba ~/workspace/enum/idl/idl/MojeID.idl
*/
#ifndef SERVER_I_HH_B20D42971A09437AAE3D4B735A7129B4
#define SERVER_I_HH_B20D42971A09437AAE3D4B735A7129B4

#include "corba/Buffer.hh"
#include "corba/MojeID.hh"
#include "src/bin/corba/mojeid/service_name.hh"

#include <boost/utility.hpp>

#include <memory>
#include <string>

namespace Fred {
namespace Backend {
namespace MojeId {

class MojeIdImpl; //backend implementation class

} // namespace Fred::Backend::MojeId
} // namespace Fred::Backend
} // namespace Fred

namespace Registry {
namespace MojeId {

///mojeid corba interface
class Server_i : private boost::noncopyable,
                 public POA_Registry::MojeID::Server
{
public:
    // standard constructor
    Server_i(const std::string& _server_name);
    virtual ~Server_i();
    // methods corresponding to defined IDL attributes and operations
    Registry::MojeID::ContactId create_contact_prepare(
            const Registry::MojeID::CreateContact& c,
            const char* trans_id,
            Registry::MojeID::LogRequestId log_request_id,
            CORBA::String_out ident) override;

    Registry::MojeID::InfoContact* transfer_contact_prepare(
            const char* handle,
            const char* trans_id,
            Registry::MojeID::LogRequestId log_request_id,
            CORBA::String_out ident) override;

    void update_contact_prepare(
            Registry::MojeID::ContactId contact_id,
            const Registry::MojeID::UpdateContact& c,
            const char* trans_id,
            Registry::MojeID::LogRequestId log_request_id) override;

    void update_validated_contact_prepare(
            Registry::MojeID::ContactId contact_id,
            const Registry::MojeID::ValidatedContactData& verified_data,
            const char* trans_id,
            Registry::MojeID::LogRequestId log_request_id) override;

    Registry::MojeID::InfoContact* update_transfer_contact_prepare(
            const char* username,
            const Registry::MojeID::UpdateTransferContact& contact_data,
            const char* trans_id,
            Registry::MojeID::LogRequestId log_request_id,
            CORBA::String_out ident) override;

    Registry::MojeID::InfoContact* info_contact(
            const char* username) override;

    Registry::MojeID::InfoContactPublishFlags get_contact_info_publish_flags(
            Registry::MojeID::ContactId contact_id) override;

    Registry::MojeID::ContactId process_registration_request(
            const char* ident_request_id,
            const char* password,
            Registry::MojeID::LogRequestId log_request_id) override;

    void process_identification_request(
            Registry::MojeID::ContactId contact_id,
            const char* password,
            Registry::MojeID::LogRequestId log_request_id) override;

    void commit_prepared_transaction(
            const char* trans_id) override;

    void rollback_prepared_transaction(
            const char* trans_id) override;

    Registry::Buffer* get_validation_pdf(
            Registry::MojeID::ContactId contact_id) override;

    void create_validation_request(
            Registry::MojeID::ContactId contact_id,
            Registry::MojeID::LogRequestId log_request_id) override;

    void validate_contact(
            Registry::MojeID::ContactId contact_id,
            Registry::MojeID::LogRequestId log_request_id) override;

    Registry::MojeID::ContactStateInfoList* get_contacts_state_changes(
            CORBA::ULong last_hours) override;

    Registry::MojeID::ContactStateInfo* get_contact_state(
            Registry::MojeID::ContactId contact_id) override;

    void cancel_account_prepare(
            Registry::MojeID::ContactId contact_id,
            const char* trans_id,
            Registry::MojeID::LogRequestId log_request_id) override;

    Registry::MojeID::ContactHandleList* get_unregistrable_handles() override;

    void send_new_pin3(
            Registry::MojeID::ContactId contact_id,
            Registry::MojeID::LogRequestId log_request_id) override;

    void send_mojeid_card(
            Registry::MojeID::ContactId contact_id,
            Registry::MojeID::LogRequestId log_request_id) override;

    void generate_sms_messages();
    void enable_sms_messages_generation(CORBA::Boolean enable) override;

    void generate_email_messages();
    void enable_email_messages_generation(CORBA::Boolean enable) override;

    void generate_letter_messages();
    void enable_letter_messages_generation(CORBA::Boolean enable) override;

private:
    const std::unique_ptr<Fred::Backend::MojeId::MojeIdImpl> impl_ptr_;
};

} // namespace Registry::MojeId
} // namespace Registry

#endif
