/*
 * Copyright (C) 2012  CZ.NIC, z.s.p.o.
 *
 * This file is part of FRED.
 *
 * FRED is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 2 of the License.
 *
 * FRED is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FRED.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 *  @file
 *  keyset delete
 */

#ifndef DELETE_KEYSET_H_251124531351
#define DELETE_KEYSET_H_251124531351

#include <string>

#include "src/fredlib/opexception.h"
#include "src/fredlib/opcontext.h"
#include "util/printable.h"

namespace Fred
{
    /**
    * Delete of keyset.
    * Keyset handle to delete is set via constructor.
    * Delete is executed by @ref exec method with database connection supplied in @ref OperationContext parameter.
    * When exception is thrown, changes to database are considered incosistent and should be rolled back by the caller.
    * In case of wrong input data or other predictable and superable failure, an instance of @ref DeleteKeysetHandle::Exception is thrown with appropriate attributes set.
    * In case of other insuperable failures and inconsistencies, an instance of @ref InternalError or other exception is thrown.
    */
    class DeleteKeysetByHandle : public Util::Printable
    {
        const std::string handle_;/**< keyset identifier */
    public:
        DECLARE_EXCEPTION_DATA(unknown_keyset_handle, std::string);/**< exception members for unknown keyset handle generated by macro @ref DECLARE_EXCEPTION_DATA*/
        DECLARE_EXCEPTION_DATA(object_linked_to_keyset_handle, std::string);/**< exception members for keyset linked to other object generated by macro @ref DECLARE_EXCEPTION_DATA*/
        struct Exception
        : virtual Fred::OperationException
        , ExceptionData_unknown_keyset_handle<Exception>
        , ExceptionData_object_linked_to_keyset_handle<Exception>
        {};
        /**
        * Delete keyset constructor with mandatory parameter.
        * @param handle sets keyset identifier into @ref handle_ attribute
        */
        DeleteKeysetByHandle(const std::string& handle);

        /**
        * Executes delete.
        * @param ctx contains reference to database and logging interface
        */
        void exec(OperationContext& ctx);

        /**
        * Dumps state of the instance into the string
        * @return string with description of the instance state
        */
        virtual std::string to_string() const;
    };

    /**
    * Delete of keyset.
    * Id of keyset to delete is set via constructor.
    * Delete is executed by @ref exec method with database connection supplied in @ref OperationContext parameter.
    * When exception is thrown, changes to database are considered incosistent and should be rolled back by the caller.
    * In case of wrong input data or other predictable and superable failure, an instance of @ref DeleteKeysetId::Exception is thrown with appropriate attributes set.
    * In case of other insuperable failures and inconsistencies, an instance of @ref InternalError or other exception is thrown.
    */
    class DeleteKeysetById : public Util::Printable
    {
        const unsigned long long id_;/**< keyset identifier */
    public:
        DECLARE_EXCEPTION_DATA(unknown_keyset_id, unsigned long long);/**< exception members for unknown keyset id generated by macro @ref DECLARE_EXCEPTION_DATA*/
        DECLARE_EXCEPTION_DATA(object_linked_to_keyset_id, unsigned long long);/**< exception members for keyset linked to other object generated by macro @ref DECLARE_EXCEPTION_DATA*/
        struct Exception
        : virtual Fred::OperationException
        , ExceptionData_unknown_keyset_id<Exception>
        , ExceptionData_object_linked_to_keyset_id<Exception>
        {};
        /**
        * Delete keyset constructor with mandatory parameter.
        * @param id sets keyset identifier into @ref id_ attribute
        */
        DeleteKeysetById(unsigned long long id_);

        /**
        * Executes delete.
        * @param ctx contains reference to database and logging interface
        */
        void exec(OperationContext& ctx);

        /**
        * Dumps state of the instance into the string
        * @return string with description of the instance state
        */
        virtual std::string to_string() const;
    };
}//namespace Fred

#endif // end of #include guard
