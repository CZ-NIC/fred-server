/*
 * Copyright (C) 2013  CZ.NIC, z.s.p.o.
 *
 * This file is part of FRED.
 *
 * FRED is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 2 of the License.
 *
 * FRED is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FRED.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 *  @file
 *  keyset info
 */

#ifndef INFO_KEYSET_H_
#define INFO_KEYSET_H_

#include <string>
#include <vector>

#include <boost/date_time/posix_time/ptime.hpp>
#include <boost/date_time/gregorian/gregorian.hpp>

#include "fredlib/opexception.h"
#include "fredlib/opcontext.h"
#include "util/optional_value.h"
#include "util/db/nullable.h"
#include "fredlib/keyset/info_keyset_data.h"
#include "util/printable.h"
namespace Fred
{

    /**
    * Element of keyset info data.
    */
    struct InfoKeysetOutput : public Util::Printable
    {
        InfoKeysetData info_keyset_data;/**< data of the keyset */

        boost::posix_time::ptime utc_timestamp;/**< timestamp of getting the keyset data in UTC */
        boost::posix_time::ptime local_timestamp;/**< timestamp of getting the keyset data in local time zone viz @ref local_timestamp_pg_time_zone_name */

        Nullable<unsigned long long> next_historyid; /**< next historyid of the keyset history*/
        boost::posix_time::ptime history_valid_from;/**< history data valid from time in local time zone viz @ref local_timestamp_pg_time_zone_name */
        Nullable<boost::posix_time::ptime> history_valid_to;/**< history data valid to time in local time zone viz @ref local_timestamp_pg_time_zone_name, null means open end */
        Nullable<unsigned long long> logd_request_id; /**< id of the request that changed keyset data*/

        /**
        * Empty constructor of the keyset info data structure.
        */
        InfoKeysetOutput()
        {}

        /**
        * Dumps state of the instance into the string
        * @return string with description of the instance state
        */
        std::string to_string() const;

        /**
        * Equality of the keyset info data structure operator. Compares only InfoKeysetData member.
        * @param rhs is right hand side of the keyset data comparison
        * @return true if equal, false if not
        */
        bool operator==(const InfoKeysetOutput& rhs) const;

        /**
        * Inequality of the keyset info data structure operator. Compares only InfoKeysetData member.
        * @param rhs is right hand side of the keyset data comparison
        * @return true if not equal, false if equal
        */
        bool operator!=(const InfoKeysetOutput& rhs) const;
    };


    /**
    * Keyset info by keyset handle.
    * Keyset handle to get info about is set via constructor.
    * It's executed by @ref exec method with database connection supplied in @ref OperationContext parameter.
    * When exception is thrown, changes to database are considered inconsistent and should be rolled back by the caller.
    * In case of wrong input data or other predictable and superable failure, the instance of @ref InfoKeysetByHandle::Exception is thrown with appropriate attributes set.
    * In case of other unsuperable failures and inconstistencies, the instance of @ref InternalError or other exception is thrown.
    */
    class InfoKeysetByHandle : public Util::Printable
    {
        const std::string handle_;/**< keyset handle */
        bool lock_;/**< lock object_registry row for keyset */

    public:
        DECLARE_EXCEPTION_DATA(unknown_handle, std::string);/**< exception members for unknown keyset handle generated by macro @ref DECLARE_EXCEPTION_DATA*/
        struct Exception
        : virtual Fred::OperationException
        , ExceptionData_unknown_handle<Exception>
        {};

        /**
        * Info keyset constructor with mandatory parameter.
        * @param handle sets keyset handle into @ref handle_ attribute
        */
        InfoKeysetByHandle(const std::string& handle);

        /**
        * Sets keyset lock flag.
        * @param lock sets lock keyset flag into @ref lock_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoKeysetByHandle& set_lock(bool lock = true);

        /**
        * Executes getting info about the keyset.
        * @param ctx contains reference to database and logging interface
        * @param local_timestamp_pg_time_zone_name is postgresql time zone name of the returned data
        * @return info data about the keyset
        */
        InfoKeysetOutput exec(OperationContext& ctx, const std::string& local_timestamp_pg_time_zone_name = "Europe/Prague");//return data

        /**
        * Dumps state of the instance into the string
        * @return string with description of the instance state
        */
        std::string to_string() const;

    };//class InfoKeysetByHandle

    /**
    * Keyset info by id.
    * Keyset id to get info about the keyset is set via constructor.
    * It's executed by @ref exec method with database connection supplied in @ref OperationContext parameter.
    * When exception is thrown, changes to database are considered inconsistent and should be rolled back by the caller.
    * In case of wrong input data or other predictable and superable failure, the instance of @ref InfoKeysetById::Exception is thrown with appropriate attributes set.
    * In case of other unsuperable failures and inconstistencies, the instance of @ref InternalError or other exception is thrown.
    */
    class InfoKeysetById : public Util::Printable
    {
        const unsigned long long id_;/**< object id of the keyset */
        bool lock_;/**< lock object_registry row for keyset */

    public:
        DECLARE_EXCEPTION_DATA(unknown_object_id, unsigned long long);/**< exception members for unknown object id of the keyset generated by macro @ref DECLARE_EXCEPTION_DATA*/
        struct Exception
        : virtual Fred::OperationException
        , ExceptionData_unknown_object_id<Exception>
        {};

        /**
        * Info keyset constructor with mandatory parameter.
        * @param id sets object id of the keyset into @ref id_ attribute
        */
        explicit InfoKeysetById(unsigned long long id);

        /**
        * Sets keyset lock flag.
        * @param lock sets lock keyset flag into @ref lock_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoKeysetById& set_lock(bool lock = true);

        /**
        * Executes getting info about the keyset.
        * @param ctx contains reference to database and logging interface
        * @param local_timestamp_pg_time_zone_name is postgresql time zone name of the returned data
        * @return info data about the keyset
        */
        InfoKeysetOutput exec(OperationContext& ctx, const std::string& local_timestamp_pg_time_zone_name = "Europe/Prague");//return data

        /**
        * Dumps state of the instance into the string
        * @return string with description of the instance state
        */
        std::string to_string() const;

    };//class InfoKeysetById

    /**
    * Keyset history info.
    * Keyset registry object identifier to get history info about the keyset is set via constructor.
    * It's executed by @ref exec method with database connection supplied in @ref OperationContext parameter.
    * When exception is thrown, changes to database are considered incosistent and should be rolled back by the caller.
    * In case of wrong input data or other predictable and superable failure, the instance of @ref InfoKeysetHistory::Exception is thrown with appropriate attributes set.
    * In case of other unsuperable failures and inconstistencies, the instance of @ref InternalError or other exception is thrown.
    */
    class InfoKeysetHistory : public Util::Printable
    {
        const std::string roid_;/**< registry object identifier of the keyset */
        Optional<boost::posix_time::ptime> history_timestamp_;/**< timestamp of history state we want to get (in time zone set in @ref local_timestamp_pg_time_zone_name parameter) */
        bool lock_;/**< lock object_registry row for keyset */
    public:
        DECLARE_EXCEPTION_DATA(unknown_registry_object_identifier, std::string);/**< exception members for unknown registry object identifier of the keyset generated by macro @ref DECLARE_EXCEPTION_DATA*/
        struct Exception
        : virtual Fred::OperationException
        , ExceptionData_unknown_registry_object_identifier<Exception>
        {};

        /**
        * Info keyset history constructor with mandatory parameter.
        * @param roid sets registry object identifier of the keyset into @ref roid_ attribute
        */
        InfoKeysetHistory(const std::string& roid);

        /**
        * Info keyset history constructor with all parameters.
        * @param roid sets registry object identifier of the keyset into @ref roid_ attribute
        * @param history_timestamp sets timestamp of history state we want to get @ref history_timestamp_ attribute
        */
        InfoKeysetHistory(const std::string& roid, const Optional<boost::posix_time::ptime>& history_timestamp);

        /**
        * Sets timestamp of history state we want to get.
        * @param history_timestamp sets timestamp of history state we want to get @ref history_timestamp_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoKeysetHistory& set_history_timestamp(boost::posix_time::ptime history_timestamp);

        /**
        * Sets keyset lock flag.
        * @param lock sets lock keyset flag into @ref lock_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoKeysetHistory& set_lock(bool lock = true);

        /**
        * Executes getting history info about the keyset.
        * @param ctx contains reference to database and logging interface
        * @param local_timestamp_pg_time_zone_name is postgresql time zone name of the returned data
        * @return history info data about the keyset
        */
        std::vector<InfoKeysetOutput> exec(OperationContext& ctx, const std::string& local_timestamp_pg_time_zone_name = "Europe/Prague");//return data

        /**
        * Dumps state of the instance into the string
        * @return string with description of the instance state
        */
        std::string to_string() const;
    };//class InfoKeysetHistory

    /**
    * Keyset info by id including history.
    * Keyset id to get info about the keyset is set via constructor.
    * It's executed by @ref exec method with database connection supplied in @ref OperationContext parameter.
    * When exception is thrown, changes to database are considered inconsistent and should be rolled back by the caller.
    * In case of wrong input data or other predictable and superable failure, the instance of @ref HistoryInfoKeysetById::Exception is thrown with appropriate attributes set.
    * In case of other unsuperable failures and inconstistencies, the instance of @ref InternalError or other exception is thrown.
    */
    class HistoryInfoKeysetById : public Util::Printable
    {
        unsigned long long id_;/**< object id of the keyset */
        bool lock_;/**< lock object_registry row for keyset */

    public:
        DECLARE_EXCEPTION_DATA(unknown_object_id, unsigned long long);/**< exception members for unknown object id of the keyset generated by macro @ref DECLARE_EXCEPTION_DATA*/
        struct Exception
        : virtual Fred::OperationException
        , ExceptionData_unknown_object_id<Exception>
        {};

        /**
        * Info keyset history constructor with mandatory parameter.
        * @param id sets object id of the keyset into @ref id_ attribute
        */
        explicit HistoryInfoKeysetById(unsigned long long id);

        /**
        * Sets keyset lock flag.
        * @param lock sets lock keyset flag into @ref lock_ attribute
        * @return operation instance reference to allow method chaining
        */
        HistoryInfoKeysetById& set_lock(bool lock = true);

        /**
        * Executes getting history info about the keyset.
        * @param ctx contains reference to database and logging interface
        * @param local_timestamp_pg_time_zone_name is postgresql time zone name of the returned data
        * @return history info data about the keyset
        */
        std::vector<InfoKeysetOutput> exec(OperationContext& ctx, const std::string& local_timestamp_pg_time_zone_name = "Europe/Prague");//return data

        /**
        * Dumps state of the instance into the string
        * @return string with description of the instance state
        */
        std::string to_string() const;

    };//class HistoryInfoKeysetById

    /**
    * Keyset info by historyid.
    * Keyset historyid to get info about the keyset is set via constructor.
    * It's executed by @ref exec method with database connection supplied in @ref OperationContext parameter.
    * When exception is thrown, changes to database are considered inconsistent and should be rolled back by the caller.
    * In case of wrong input data or other predictable and superable failure, the instance of @ref HistoryInfoKeysetByHistoryid::Exception is thrown with appropriate attributes set.
    * In case of other unsuperable failures and inconstistencies, the instance of @ref InternalError or other exception is thrown.
    */
    class HistoryInfoKeysetByHistoryid : public Util::Printable
    {
        unsigned long long historyid_;/**< history id of the keyset */
        bool lock_;/**< lock object_registry row for keyset */

    public:
        DECLARE_EXCEPTION_DATA(unknown_object_historyid, unsigned long long);/**< exception members for unknown object historyid of the keyset generated by macro @ref DECLARE_EXCEPTION_DATA*/
        struct Exception
        : virtual Fred::OperationException
        , ExceptionData_unknown_object_historyid<Exception>
        {};

        /**
        * Info keyset history constructor with mandatory parameter.
        * @param historyid sets object historyid of the keyset into @ref historyid_ attribute
        */
        explicit HistoryInfoKeysetByHistoryid(unsigned long long historyid);

        /**
        * Sets keyset lock flag.
        * @param lock sets lock keyset flag into @ref lock_ attribute
        * @return operation instance reference to allow method chaining
        */
        HistoryInfoKeysetByHistoryid& set_lock(bool lock = true);

        /**
        * Executes getting history info about the keyset.
        * @param ctx contains reference to database and logging interface
        * @param local_timestamp_pg_time_zone_name is postgresql time zone name of the returned data
        * @return history info data about the keyset
        */
        InfoKeysetOutput exec(OperationContext& ctx, const std::string& local_timestamp_pg_time_zone_name = "Europe/Prague");//return data

        /**
        * Dumps state of the instance into the string
        * @return string with description of the instance state
        */
        std::string to_string() const;

    };//class HistoryInfoKeysetByHistoryid


    /**
    * Keyset info implementation.
    * It's executed by @ref exec method with database connection supplied in @ref OperationContext parameter.
    * When exception is thrown, changes to database are considered inconsistent and should be rolled back by the caller.
    */
    class InfoKeyset
    {
        Optional<std::string> handle_;/**< keyset handle */
        Optional<std::string> keyset_roid_;/**< registry object identifier of the keyset */
        Optional<unsigned long long> keyset_id_;/**< object id of the keyset */
        Optional<unsigned long long> keyset_historyid_;/**< history id of the keyset */
        Optional<boost::posix_time::ptime> history_timestamp_;/**< timestamp of history state we want to get (in time zone set in @ref local_timestamp_pg_time_zone_name parameter) */
        bool history_query_;/**< flag to query history records of the keyset */
        bool lock_;/**< lock object_registry row for keyset */

        std::pair<std::string, Database::QueryParams> make_keyset_query(const std::string& local_timestamp_pg_time_zone_name);/**< info query generator @return pair of query string with query params*/
        std::pair<std::string, Database::QueryParams> make_tech_contact_query(unsigned long long id, unsigned long long historyid);/**< keyset technical contacts query generator @return pair of query string with query params*/
        std::pair<std::string, Database::QueryParams> make_dns_keys_query(unsigned long long id, unsigned long long historyid);/**< keyset DNS keys query generator @return pair of query string with query params*/
    public:

        /**
        * Default constructor.
        * Sets @ref history_query_ and @ref lock_ to false
        */
        InfoKeyset();

        /**
        * Sets keyset handle.
        * @param handle sets keyset handle we want to get @ref handle_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoKeyset& set_handle(const std::string& handle);

        /**
        * Sets registry object identifier of the keyset.
        * @param keyset_roid sets registry object identifier of the keyset we want to get @ref keyset_roid_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoKeyset& set_roid(const std::string& keyset_roid);

        /**
        * Sets database identifier of the keyset.
        * @param keyset_id sets object identifier of the keyset we want to get @ref keyset_id_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoKeyset& set_id(unsigned long long keyset_id);

        /**
        * Sets history identifier of the keyset.
        * @param keyset_historyid sets history identifier of the keyset we want to get @ref keyset_historyid_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoKeyset& set_historyid(unsigned long long keyset_historyid);

        /**
        * Sets timestamp of history state we want to get.
        * @param history_timestamp sets timestamp of history state we want to get @ref history_timestamp_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoKeyset& set_history_timestamp(boost::posix_time::ptime history_timestamp);

        /**
        * Sets history query flag.
        * @param history_query sets history query flag into @ref history query_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoKeyset& set_history_query(bool history_query);


        /**
        * Sets keyset lock flag.
        * @param lock sets lock keyset flag into @ref lock_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoKeyset& set_lock(bool lock = true);

        /**
        * Executes getting info about the keyset.
        * @param ctx contains reference to database and logging interface
        * @param local_timestamp_pg_time_zone_name is postgresql time zone name of the returned data
        * @return info data about the keyset
        */
        std::vector<InfoKeysetOutput> exec(OperationContext& ctx, const std::string& local_timestamp_pg_time_zone_name = "UTC");//return data

        /**
        * Executes explain analyze and getting info about the keyset for testing purposes.
        * @param ctx contains reference to database and logging interface
        * @param local_timestamp_pg_time_zone_name is postgresql time zone name of the returned data and history_timestamp
        * @param result info data about the keyset
        * @return query and plan
        */
        std::string explain_analyze(OperationContext& ctx, std::vector<InfoKeysetOutput>& result, const std::string& local_timestamp_pg_time_zone_name = "Europe/Prague");//return query plan
    };//class InfoKeyset

}//namespace Fred

#endif//INFO_KEYSET_H_
