/*
 * Copyright (C) 2013  CZ.NIC, z.s.p.o.
 *
 * This file is part of FRED.
 *
 * FRED is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 2 of the License.
 *
 * FRED is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FRED.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 *  @file
 *  keyset info
 */

#ifndef INFO_KEYSET_H_
#define INFO_KEYSET_H_

#include <string>
#include <vector>
#include <set>

#include <boost/date_time/posix_time/ptime.hpp>
#include <boost/date_time/gregorian/gregorian.hpp>

#include "fredlib/opexception.h"
#include "fredlib/opcontext.h"
#include "util/optional_value.h"
#include "util/db/nullable.h"
#include "util/printable.h"
#include "fredlib/keyset/info_keyset_data.h"


namespace Fred
{
    /**
    * Keyset info data structure.
    */
    struct InfoKeysetOutput : public Util::Printable
    {
        InfoKeysetData info_keyset_data;/**< data of the keyset */
        boost::posix_time::ptime utc_timestamp;/**< timestamp of getting the keyset data in UTC */
        boost::posix_time::ptime local_timestamp;/**< timestamp of getting the keyset data in local time zone viz @ref local_timestamp_pg_time_zone_name */

        /**
         * Empty constructor.
         */
        InfoKeysetOutput()
        {}

        /**
        * Equality of the keyset data structure.
        * Compares only data of the keyset @ref info_keyset_data, not the timestamps.
        * @param rhs is right hand side of the keyset data comparison
        * @return true if equal, false if not
        */
        bool operator==(const InfoKeysetOutput& rhs) const
        {
            return info_keyset_data == rhs.info_keyset_data;
        }

        /**
        * Inequality of the keyset data structure.
        * Compares only data of the keyset @ref info_keyset_data, not the timestamps.
        * @param rhs is right hand side of the keyset data comparison
        * @return true if not equal, false if equal
        */
        bool operator!=(const InfoKeysetOutput& rhs) const
        {
            return !this->operator ==(rhs);
        }

        /**
        * Dumps state of the instance into the string
        * @return string with description of the instance state
        */
        std::string to_string() const;
    };

    /**
    * Info of keyset.
    * Keyset fully qualified name to get info about is set via constructor.
    * Info is executed by @ref exec method with database connection supplied in @ref OperationContext parameter.
    * When exception is thrown, changes to database are considered incosistent and should be rolled back by the caller.
    * In case of wrong input data or other predictable and superable failure, the instance of @ref InfoKeyset::Exception is thrown with appropriate attributes set.
    * In case of other unsuperable failures and inconstistencies, the instance of @ref InternalError or other exception is thrown.
    */
    class InfoKeyset : public Util::Printable
    {
        const std::string handle_;/**< keyset identifier */
        bool lock_;/**< lock object_registry row flag*/

    public:
        DECLARE_EXCEPTION_DATA(unknown_keyset_handle, std::string);/**< exception members for unknown keyset handle generated by macro @ref DECLARE_EXCEPTION_DATA*/
        struct Exception
        : virtual Fred::OperationException
        , ExceptionData_unknown_keyset_handle<Exception>
        {};

        /**
        * Info keyset constructor with mandatory parameter.
        * @param handle sets keyset identifier into @ref handle_ attribute
        */
        InfoKeyset(const std::string& handle);

        /**
        * Sets keyset lock flag.
        * @param lock sets lock keyset flag into @ref lock_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoKeyset& set_lock(bool lock = true);

        /**
        * Executes getting info about the keyset.
        * @param ctx contains reference to database and logging interface
        * @param local_timestamp_pg_time_zone_name is postgresql time zone name of the returned data
        * @return info data about the keyset
        */
        InfoKeysetOutput exec(OperationContext& ctx, const std::string& local_timestamp_pg_time_zone_name = "Europe/Prague");//return data

        /**
        * Dumps state of the instance into the string
        * @return string with description of the instance state
        */
        std::string to_string() const;
    };//class InfoKeyset

}//namespace Fred

#endif//INFO_KEYSET_H_
