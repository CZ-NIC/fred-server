/*
 * Copyright (C) 2013  CZ.NIC, z.s.p.o.
 *
 * This file is part of FRED.
 *
 * FRED is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 2 of the License.
 *
 * FRED is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FRED.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 *  @file
 *  contact history info
 */

#ifndef INFO_CONTACT_HISTORY_H_
#define INFO_CONTACT_HISTORY_H_

#include <string>
#include <vector>

#include <boost/date_time/posix_time/ptime.hpp>
#include <boost/date_time/gregorian/gregorian.hpp>

#include "fredlib/opexception.h"
#include "fredlib/opcontext.h"
#include "util/optional_value.h"
#include "util/db/nullable.h"
#include "util/printable.h"
#include "fredlib/contact/info_contact_data.h"

namespace Fred
{
    /**
    * Element of contact history data.
    */
    struct InfoContactOutput : public Util::Printable
    {
        unsigned long long id;/**< id of the contact object*/
        InfoContactData info_contact_data;/**< data of the contact */
        boost::posix_time::ptime utc_timestamp;/**< timestamp of getting the contact data in UTC */
        boost::posix_time::ptime local_timestamp;/**< timestamp of getting the contact data in local time zone viz @ref local_timestamp_pg_time_zone_name */

        Nullable<unsigned long long> next_historyid; /**< next historyid of the contact history*/
        boost::posix_time::ptime history_valid_from;/**< history data valid from time */
        Nullable<boost::posix_time::ptime> history_valid_to;/**< history data valid to time, null means open end */
        Nullable<unsigned long long> logd_request_id; /**< id of the request that changed contact data*/

        /**
        * Empty constructor of the contact history data structure.
        */
        InfoContactOutput()
        :id(0)
        {}

        /**
        * Dumps state of the instance into the string
        * @return string with description of the instance state
        */
        std::string to_string() const;

        /**
        * Equality of the contact info data structure operator. Compares only InfoContactData member.
        * @param rhs is right hand side of the contact data comparison
        * @return true if equal, false if not
        */
        bool operator==(const InfoContactOutput& rhs) const;

        /**
        * Inequality of the contact info data structure operator. Compares only InfoContactData member.
        * @param rhs is right hand side of the contact data comparison
        * @return true if not equal, false if equal
        */
        bool operator!=(const InfoContactOutput& rhs) const;

    };

    /**
    * Contact info by handle.
    * Contact handle to get info about the contact is set via constructor.
    * It's executed by @ref exec method with database connection supplied in @ref OperationContext parameter.
    * When exception is thrown, changes to database are considered inconsistent and should be rolled back by the caller.
    * In case of wrong input data or other predictable and superable failure, the instance of @ref InfoContactByHandle::Exception is thrown with appropriate attributes set.
    * In case of other unsuperable failures and inconstistencies, the instance of @ref InternalError or other exception is thrown.
    */
    class InfoContactByHandle : public Util::Printable
    {
        const std::string handle_;/**< handle of the contact */
        bool lock_;/**< lock object_registry row for contact */

    public:
        DECLARE_EXCEPTION_DATA(unknown_contact_handle, std::string);/**< exception members for unknown handle of the contact generated by macro @ref DECLARE_EXCEPTION_DATA*/
        struct Exception
        : virtual Fred::OperationException
        , ExceptionData_unknown_contact_handle<Exception>
        {};

        /**
        * Info contact constructor with mandatory parameter.
        * @param handle sets handle of the contact into @ref handle_ attribute
        */
        InfoContactByHandle(const std::string& handle);

        /**
        * Sets contact lock flag.
        * @param lock sets lock contact flag into @ref lock_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoContactByHandle& set_lock(bool lock = true);

        /**
        * Executes getting info about the contact.
        * @param ctx contains reference to database and logging interface
        * @param local_timestamp_pg_time_zone_name is postgresql time zone name of the returned data
        * @return info data about the contact
        */
        InfoContactOutput exec(OperationContext& ctx, const std::string& local_timestamp_pg_time_zone_name = "Europe/Prague");//return data

        /**
        * Dumps state of the instance into the string
        * @return string with description of the instance state
        */
        std::string to_string() const;

    };//class InfoContactByHandle

    /**
    * Contact info by id.
    * Contact id to get info about the contact is set via constructor.
    * It's executed by @ref exec method with database connection supplied in @ref OperationContext parameter.
    * When exception is thrown, changes to database are considered inconsistent and should be rolled back by the caller.
    * In case of wrong input data or other predictable and superable failure, the instance of @ref InfoContactById::Exception is thrown with appropriate attributes set.
    * In case of other unsuperable failures and inconstistencies, the instance of @ref InternalError or other exception is thrown.
    */
    class InfoContactById : public Util::Printable
    {
        const unsigned long long id_;/**< object id of the contact */
        bool lock_;/**< lock object_registry row for contact */

    public:
        DECLARE_EXCEPTION_DATA(unknown_object_id, unsigned long long);/**< exception members for unknown object id of the contact generated by macro @ref DECLARE_EXCEPTION_DATA*/
        struct Exception
        : virtual Fred::OperationException
        , ExceptionData_unknown_object_id<Exception>
        {};

        /**
        * Info contact constructor with mandatory parameter.
        * @param id sets object id of the contact into @ref id_ attribute
        */
        InfoContactById(unsigned long long id);

        /**
        * Sets contact lock flag.
        * @param lock sets lock contact flag into @ref lock_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoContactById& set_lock(bool lock = true);

        /**
        * Executes getting info about the contact.
        * @param ctx contains reference to database and logging interface
        * @param local_timestamp_pg_time_zone_name is postgresql time zone name of the returned data
        * @return info data about the contact
        */
        InfoContactOutput exec(OperationContext& ctx, const std::string& local_timestamp_pg_time_zone_name = "Europe/Prague");//return data

        /**
        * Dumps state of the instance into the string
        * @return string with description of the instance state
        */
        std::string to_string() const;

    };//class InfoContactById

    /**
    * Contact history info.
    * Contact registry object identifier to get history info about the contact is set via constructor.
    * It's executed by @ref exec method with database connection supplied in @ref OperationContext parameter.
    * When exception is thrown, changes to database are considered inconsistent and should be rolled back by the caller.
    * In case of wrong input data or other predictable and superable failure, the instance of @ref InfoContactHistory::Exception is thrown with appropriate attributes set.
    * In case of other unsuperable failures and inconstistencies, the instance of @ref InternalError or other exception is thrown.
    */
    class InfoContactHistory  : public Util::Printable
    {
        const std::string roid_;/**< registry object identifier of the contact */
        Optional<boost::posix_time::ptime> history_timestamp_;/**< timestamp of history state we want to get (in time zone set in @ref local_timestamp_pg_time_zone_name parameter) */
        bool lock_;/**< lock object_registry row for contact */

    public:
        DECLARE_EXCEPTION_DATA(unknown_registry_object_identifier, std::string);/**< exception members for unknown registry object identifier of the contact generated by macro @ref DECLARE_EXCEPTION_DATA*/
        struct Exception
        : virtual Fred::OperationException
        , ExceptionData_unknown_registry_object_identifier<Exception>
        {};

        /**
        * Info contact history constructor with mandatory parameter.
        * @param roid sets registry object identifier of the contact into @ref roid_ attribute
        */
        InfoContactHistory(const std::string& roid);

        /**
        * Info contact history constructor with all parameters.
        * @param roid sets registry object identifier of the contact into @ref roid_ attribute
        * @param history_timestamp sets timestamp of history state we want to get @ref history_timestamp_ attribute
        */
        InfoContactHistory(const std::string& roid, const Optional<boost::posix_time::ptime>& history_timestamp);

        /**
        * Sets timestamp of history state we want to get.
        * @param history_timestamp sets timestamp of history state we want to get @ref history_timestamp_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoContactHistory& set_history_timestamp(boost::posix_time::ptime history_timestamp);

        /**
        * Sets contact lock flag.
        * @param lock sets lock contact flag into @ref lock_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoContactHistory& set_lock(bool lock = true);

        /**
        * Executes getting history info about the contact.
        * @param ctx contains reference to database and logging interface
        * @param local_timestamp_pg_time_zone_name is postgresql time zone name of the returned data
        * @return history info data about the contact
        */
        std::vector<InfoContactOutput> exec(OperationContext& ctx, const std::string& local_timestamp_pg_time_zone_name = "Europe/Prague");//return data

        /**
        * Dumps state of the instance into the string
        * @return string with description of the instance state
        */
        std::string to_string() const;

    };//class InfoContactHistory

    /**
    * Contact info by id with history.
    * Contact id to get info about the contact is set via constructor.
    * It's executed by @ref exec method with database connection supplied in @ref OperationContext parameter.
    * When exception is thrown, changes to database are considered inconsistent and should be rolled back by the caller.
    * In case of wrong input data or other predictable and superable failure, the instance of @ref HistoryInfoContactById::Exception is thrown with appropriate attributes set.
    * In case of other unsuperable failures and inconstistencies, the instance of @ref InternalError or other exception is thrown.
    */
    class HistoryInfoContactById : public Util::Printable
    {
        unsigned long long id_;/**< object id of the contact */
        bool lock_;/**< lock object_registry row for contact */

    public:
        DECLARE_EXCEPTION_DATA(unknown_object_id, unsigned long long);/**< exception members for unknown object id of the contact generated by macro @ref DECLARE_EXCEPTION_DATA*/
        struct Exception
        : virtual Fred::OperationException
        , ExceptionData_unknown_object_id<Exception>
        {};

        /**
        * Info contact history constructor with mandatory parameter.
        * @param id sets object id of the contact into @ref id_ attribute
        */
        HistoryInfoContactById(unsigned long long id);

        /**
        * Sets contact lock flag.
        * @param lock sets lock contact flag into @ref lock_ attribute
        * @return operation instance reference to allow method chaining
        */
        HistoryInfoContactById& set_lock(bool lock = true);

        /**
        * Executes getting history info about the contact.
        * @param ctx contains reference to database and logging interface
        * @param local_timestamp_pg_time_zone_name is postgresql time zone name of the returned data
        * @return history info data about the contact
        */
        std::vector<InfoContactOutput> exec(OperationContext& ctx, const std::string& local_timestamp_pg_time_zone_name = "Europe/Prague");//return data

        /**
        * Dumps state of the instance into the string
        * @return string with description of the instance state
        */
        std::string to_string() const;

    };//class HistoryInfoContactById

    /**
    * Contact info by historyid.
    * Contact historyid to get info about the contact is set via constructor.
    * It's executed by @ref exec method with database connection supplied in @ref OperationContext parameter.
    * When exception is thrown, changes to database are considered inconsistent and should be rolled back by the caller.
    * In case of wrong input data or other predictable and superable failure, the instance of @ref HistoryInfoContactByHistoryid::Exception is thrown with appropriate attributes set.
    * In case of other unsuperable failures and inconstistencies, the instance of @ref InternalError or other exception is thrown.
    */
    class HistoryInfoContactByHistoryid : public Util::Printable
    {
        unsigned long long historyid_;/**< history id of the contact */
        bool lock_;/**< lock object_registry row for contact */

    public:
        DECLARE_EXCEPTION_DATA(unknown_object_historyid, unsigned long long);/**< exception members for unknown object historyid of the contact generated by macro @ref DECLARE_EXCEPTION_DATA*/
        struct Exception
        : virtual Fred::OperationException
        , ExceptionData_unknown_object_historyid<Exception>
        {};

        /**
        * Info contact history constructor with mandatory parameter.
        * @param historyid sets object historyid of the contact into @ref historyid_ attribute
        */
        HistoryInfoContactByHistoryid(unsigned long long historyid);

        /**
        * Sets contact lock flag.
        * @param lock sets lock contact flag into @ref lock_ attribute
        * @return operation instance reference to allow method chaining
        */
        HistoryInfoContactByHistoryid& set_lock(bool lock = true);

        /**
        * Executes getting history info about the contact.
        * @param ctx contains reference to database and logging interface
        * @param local_timestamp_pg_time_zone_name is postgresql time zone name of the returned data
        * @return history info data about the contact
        */
        InfoContactOutput exec(OperationContext& ctx, const std::string& local_timestamp_pg_time_zone_name = "Europe/Prague");//return data

        /**
        * Dumps state of the instance into the string
        * @return string with description of the instance state
        */
        std::string to_string() const;

    };//class HistoryInfoContactByHistoryid


    /**
    * Contact info implementation.
    * It's executed by @ref exec method with database connection supplied in @ref OperationContext parameter.
    * When exception is thrown, changes to database are considered inconsistent and should be rolled back by the caller.
    */
    class InfoContactImpl
    {
        Optional<std::string> contact_handle_;
        Optional<std::string> contact_roid_;
        Optional<unsigned long long> contact_id_;
        Optional<unsigned long long> contact_historyid_;
        Optional<boost::posix_time::ptime> history_timestamp_;
        bool history_query_;
        bool lock_;

    public:
        /**
         * Default constructor.
         * Sets @ref history_query_ and @ref lock_ to false
         */
        InfoContactImpl();

        /**
        * Sets handle of the contact.
        * @param contact_handle sets handle of the contact we want to get @ref contact_handle_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoContactImpl& set_handle(const std::string& contact_handle);

        /**
        * Sets registry object identifier of the contact.
        * @param contact_roid sets registry object identifier of the contact we want to get @ref contact_roid_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoContactImpl& set_roid(const std::string& contact_roid);

        /**
        * Sets database identifier of the contact.
        * @param contact_id sets object identifier of the contact we want to get @ref contact_id_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoContactImpl& set_id(unsigned long long contact_id);

        /**
        * Sets history identifier of the contact.
        * @param contact_historyid sets history identifier of the contact we want to get @ref contact_historyid_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoContactImpl& set_historyid(unsigned long long contact_historyid);

        /**
        * Sets timestamp of the history state we want to get.
        * @param history_timestamp sets timestamp of history state we want to get @ref history_timestamp_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoContactImpl& set_history_timestamp(const boost::posix_time::ptime& history_timestamp);

        /**
        * Sets history query flag.
        * @param history_query sets history query flag into @ref history query_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoContactImpl& set_history_query(bool history_query);

        /**
        * Sets the contact lock flag.
        * @param lock sets lock contact flag into @ref lock_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoContactImpl& set_lock(bool lock = true);

        /**
        * Executes getting info about the contact.
        * @param ctx contains reference to database and logging interface
        * @param local_timestamp_pg_time_zone_name is postgresql time zone name of the returned data and history_timestamp
        * @return info data about the contact
        */
        std::vector<InfoContactOutput> exec(OperationContext& ctx, const std::string& local_timestamp_pg_time_zone_name = "UTC");//return data


    };//classInfoContactImpl
}//namespace Fred

#endif//INFO_CONTACT_HISTORY_H_
