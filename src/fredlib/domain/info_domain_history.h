/*
 * Copyright (C) 2013  CZ.NIC, z.s.p.o.
 *
 * This file is part of FRED.
 *
 * FRED is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 2 of the License.
 *
 * FRED is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FRED.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 *  @file
 *  domain history info
 */

#ifndef INFO_DOMAIN_HISTORY_H_
#define INFO_DOMAIN_HISTORY_H_

#include <string>
#include <vector>

#include <boost/date_time/posix_time/ptime.hpp>
#include <boost/date_time/gregorian/gregorian.hpp>

#include "fredlib/opexception.h"
#include "fredlib/opcontext.h"
#include "util/optional_value.h"
#include "util/db/nullable.h"
#include "util/printable.h"
#include "fredlib/domain/info_domain_data.h"

namespace Fred
{

    /**
    * Element of domain info data.
    */
    struct InfoDomainOutput : public Util::Printable
    {
        InfoDomainData info_domain_data;/**< data of the domain */

        boost::posix_time::ptime utc_timestamp;/**< timestamp of getting the domain data in UTC */
        boost::posix_time::ptime local_timestamp;/**< timestamp of getting the domain data in local time zone viz @ref local_timestamp_pg_time_zone_name */

        Nullable<unsigned long long> next_historyid; /**< next historyid of the domain history*/
        boost::posix_time::ptime history_valid_from;/**< history data valid from time */
        Nullable<boost::posix_time::ptime> history_valid_to;/**< history data valid to time, null means open end */
        Nullable<unsigned long long> logd_request_id; /**< id of the request that changed domain data*/

        /**
        * Empty constructor of the domain history data structure.
        */
        InfoDomainOutput()
        {}

        /**
        * Dumps state of the instance into the string
        * @return string with description of the instance state
        */
        std::string to_string() const;

        /**
        * Equality of the domain info data structure operator. Compares only InfoContactData member.
        * @param rhs is right hand side of the domain data comparison
        * @return true if equal, false if not
        */
        bool operator==(const InfoDomainOutput& rhs) const;

        /**
        * Inequality of the domain info data structure operator. Compares only InfoContactData member.
        * @param rhs is right hand side of the domain data comparison
        * @return true if not equal, false if equal
        */
        bool operator!=(const InfoDomainOutput& rhs) const;
    };





    /**
    * Domain info by fully qualified domain name.
    * Domain fully qualified name to get info about is set via constructor.
    * It's executed by @ref exec method with database connection supplied in @ref OperationContext parameter.
    * When exception is thrown, changes to database are considered inconsistent and should be rolled back by the caller.
    * In case of wrong input data or other predictable and superable failure, the instance of @ref InfoDomainByHandle::Exception is thrown with appropriate attributes set.
    * In case of other unsuperable failures and inconstistencies, the instance of @ref InternalError or other exception is thrown.
    */
    class InfoDomainByHandle : public Util::Printable
    {
        const std::string fqdn_;/**< fully qualified domain name */
        bool lock_;/**< lock object_registry row for domain */

    public:
        DECLARE_EXCEPTION_DATA(unknown_fqdn, std::string);/**< exception members for unknown fully qualified domain name generated by macro @ref DECLARE_EXCEPTION_DATA*/
        struct Exception
        : virtual Fred::OperationException
        , ExceptionData_unknown_fqdn<Exception>
        {};

        /**
        * Info domain constructor with mandatory parameter.
        * @param fqdn sets fully qualified domain name into @ref fqdn_ attribute
        */
        InfoDomainByHandle(const std::string& fqdn);

        /**
        * Sets domain lock flag.
        * @param lock sets lock domain flag into @ref lock_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoDomainByHandle& set_lock(bool lock = true);

        /**
        * Executes getting info about the domain.
        * @param ctx contains reference to database and logging interface
        * @param local_timestamp_pg_time_zone_name is postgresql time zone name of the returned data
        * @return info data about the domain
        */
        InfoDomainOutput exec(OperationContext& ctx, const std::string& local_timestamp_pg_time_zone_name = "Europe/Prague");//return data

        /**
        * Dumps state of the instance into the string
        * @return string with description of the instance state
        */
        std::string to_string() const;

    };//class InfoDomainByHandle

    /**
    * Domain info by id.
    * Domain id to get info about the domain is set via constructor.
    * It's executed by @ref exec method with database connection supplied in @ref OperationContext parameter.
    * When exception is thrown, changes to database are considered inconsistent and should be rolled back by the caller.
    * In case of wrong input data or other predictable and superable failure, the instance of @ref InfoDomainById::Exception is thrown with appropriate attributes set.
    * In case of other unsuperable failures and inconstistencies, the instance of @ref InternalError or other exception is thrown.
    */
    class InfoDomainById : public Util::Printable
    {
        const unsigned long long id_;/**< object id of the domain */
        bool lock_;/**< lock object_registry row for domain */

    public:
        DECLARE_EXCEPTION_DATA(unknown_object_id, unsigned long long);/**< exception members for unknown object id of the domain generated by macro @ref DECLARE_EXCEPTION_DATA*/
        struct Exception
        : virtual Fred::OperationException
        , ExceptionData_unknown_object_id<Exception>
        {};

        /**
        * Info domain constructor with mandatory parameter.
        * @param id sets object id of the domain into @ref id_ attribute
        */
        explicit InfoDomainById(unsigned long long id);

        /**
        * Sets domain lock flag.
        * @param lock sets lock domain flag into @ref lock_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoDomainById& set_lock(bool lock = true);

        /**
        * Executes getting info about the domain.
        * @param ctx contains reference to database and logging interface
        * @param local_timestamp_pg_time_zone_name is postgresql time zone name of the returned data
        * @return info data about the domain
        */
        InfoDomainOutput exec(OperationContext& ctx, const std::string& local_timestamp_pg_time_zone_name = "Europe/Prague");//return data

        /**
        * Dumps state of the instance into the string
        * @return string with description of the instance state
        */
        std::string to_string() const;

    };//class InfoDomainById












    /**
    * Domain history info.
    * Domain registry object identifier to get history info about the domain is set via constructor.
    * It's executed by @ref exec method with database connection supplied in @ref OperationContext parameter.
    * When exception is thrown, changes to database are considered incosistent and should be rolled back by the caller.
    * In case of wrong input data or other predictable and superable failure, the instance of @ref InfoDomainHistory::Exception is thrown with appropriate attributes set.
    * In case of other unsuperable failures and inconstistencies, the instance of @ref InternalError or other exception is thrown.
    */
    class InfoDomainHistory  : public Util::Printable
    {
        const std::string roid_;/**< registry object identifier of the domain */
        Optional<boost::posix_time::ptime> history_timestamp_;/**< timestamp of history state we want to get (in time zone set in @ref local_timestamp_pg_time_zone_name parameter) */
        bool lock_;/**< lock object_registry row for domain */

    public:
        DECLARE_EXCEPTION_DATA(unknown_registry_object_identifier, std::string);/**< exception members for unknown registry object identifier of the domain generated by macro @ref DECLARE_EXCEPTION_DATA*/
        struct Exception
        : virtual Fred::OperationException
        , ExceptionData_unknown_registry_object_identifier<Exception>
        {};

        /**
        * Info domain history constructor with mandatory parameter.
        * @param roid sets registry object identifier of the domain into @ref roid_ attribute
        */
        InfoDomainHistory(const std::string& roid);

        /**
        * Info domain history constructor with all parameters.
        * @param roid sets registry object identifier of the domain into @ref roid_ attribute
        * @param history_timestamp sets timestamp of history state we want to get @ref history_timestamp_ attribute
        */
        InfoDomainHistory(const std::string& roid, const Optional<boost::posix_time::ptime>& history_timestamp);

        /**
        * Sets timestamp of history state we want to get.
        * @param history_timestamp sets timestamp of history state we want to get @ref history_timestamp_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoDomainHistory& set_history_timestamp(boost::posix_time::ptime history_timestamp);

        /**
        * Sets domain lock flag.
        * @param lock sets lock domain flag into @ref lock_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoDomainHistory& set_lock(bool lock = true);

        /**
        * Executes getting history info about the domain.
        * @param ctx contains reference to database and logging interface
        * @param local_timestamp_pg_time_zone_name is postgresql time zone name of the returned data
        * @return history info data about the domain
        */
        std::vector<InfoDomainOutput> exec(OperationContext& ctx, const std::string& local_timestamp_pg_time_zone_name = "Europe/Prague");//return data

        /**
        * Dumps state of the instance into the string
        * @return string with description of the instance state
        */
        std::string to_string() const;

    };//class InfoDomainHistory

    /**
    * Domain info implementation.
    * It's executed by @ref exec method with database connection supplied in @ref OperationContext parameter.
    * When exception is thrown, changes to database are considered inconsistent and should be rolled back by the caller.
    */
    class InfoDomain
    {
        Optional<std::string> fqdn_;/**< fully qualified domain name */
        Optional<std::string> domain_roid_;/**< registry object identifier of the domain */
        Optional<unsigned long long> domain_id_;/**< object id of the domain */
        Optional<unsigned long long> domain_historyid_;/**< history id of the domain */
        Optional<boost::posix_time::ptime> history_timestamp_;/**< timestamp of history state we want to get (in time zone set in @ref local_timestamp_pg_time_zone_name parameter) */
        bool history_query_;/**< flag to query history records of the domain */
        bool lock_;/**< lock object_registry row for domain */

    public:

        /**
        * Default constructor.
        * Sets @ref history_query_ and @ref lock_ to false
        */
        InfoDomain();

        /**
        * Sets fully qualified domain name.
        * @param fqdn sets fully qualified domain name we want to get @ref fqdn_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoDomain& set_fqdn(const std::string& fqdn);

        /**
        * Sets registry object identifier of the domain.
        * @param domain_roid sets registry object identifier of the domain we want to get @ref domain_roid_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoDomain& set_roid(const std::string& domain_roid);

        /**
        * Sets database identifier of the domain.
        * @param domain_id sets object identifier of the domain we want to get @ref domain_id_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoDomain& set_id(unsigned long long domain_id);

        /**
        * Sets history identifier of the domain.
        * @param domain_historyid sets history identifier of the domain we want to get @ref domain_historyid_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoDomain& set_historyid(unsigned long long domain_historyid);

        /**
        * Sets timestamp of history state we want to get.
        * @param history_timestamp sets timestamp of history state we want to get @ref history_timestamp_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoDomain& set_history_timestamp(boost::posix_time::ptime history_timestamp);

        /**
        * Sets history query flag.
        * @param history_query sets history query flag into @ref history query_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoDomain& set_history_query(bool history_query);


        /**
        * Sets domain lock flag.
        * @param lock sets lock domain flag into @ref lock_ attribute
        * @return operation instance reference to allow method chaining
        */
        InfoDomain& set_lock(bool lock = true);

        /**
        * Executes getting info about the domain.
        * @param ctx contains reference to database and logging interface
        * @param local_timestamp_pg_time_zone_name is postgresql time zone name of the returned data
        * @return info data about the domain
        */
        std::vector<InfoDomainOutput> exec(OperationContext& ctx, const std::string& local_timestamp_pg_time_zone_name = "UTC");//return data

    };//class InfoDomain




}//namespace Fred

#endif//INFO_DOMAIN_HISTORY_H_
