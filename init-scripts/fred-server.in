#!/bin/sh

if [ -f /lib/lsb/init-functions ]; then
    . /lib/lsb/init-functions
else
    log_failure_msg() { echo "ERROR: $1"; }
    log_success_msg() { echo "SUCCESS: $1"; }
fi

PATH=$PATH:/sbin # to find pidof on redhat

FRED_PATH=@SBINDIR@
VARRUN_PATH=@LOCALSTATEDIR@/run/
RIFD_PORT=@RIFDPORT@
PIFD_PORT=@PIFDPORT@
ADIFD_PORT=@ADIFDPORT@
OPTIONS="-ORBnativeCharCodeSet UTF-8 -ORBendPoint giop:tcp::"

MSG_START="Starting FRED central registry CORBA servers..."
MSG_STOP="Stopping FRED central registry CORBA servers..."

# set DB_INIT=0 if you have your own database setup (database name,
# database user, access rules..etc)
DB_INIT=1
DB_MANAGER=@SBINDIR@/fred-dbmanager

check_pidfile() {
    ps -p $(cat $1 2>/dev/null) >/dev/null 2>&1
}

fred_start() {
    if [ $DB_INIT -eq 1 -a -x $DB_MANAGER ]
    then
	# this script will ensure that database exists
        if $DB_MANAGER testuser
        then
            $DB_MANAGER install
        elif [ "$(whoami)" == "root" ]; then
	    /bin/su - postgres -c "$DB_MANAGER install"
        fi
	if [ $? -ne 0 ]; then 
            log_failure_msg "${MSG_START}"
            exit 1; 
        fi
    fi
    if [ ! -d $VARRUN_PATH ]; then
	mkdir -p ${VARRUN_PATH}
    fi
    NUM=0
    START_SUCCEDED=1
    if check_pidfile ${VARRUN_PATH}/pyfred.pid; then NUM=$(($NUM+1)); else
        @BINDIR@/pyfredctl start >/dev/null 2>&1
	if [ $? -eq 0 ]; then
            START_SUCCEDED=0
	    NUM=$(($NUM+1))
	fi
    fi
    if check_pidfile ${VARRUN_PATH}/fred-rifd.pid; then /bin/true; else
        ${FRED_PATH}/fred-rifd ${OPTIONS}${RIFD_PORT} 2>/dev/null &
        if [ $? -eq 0 ]; then
            START_SUCCEDED=0
	    NUM=$(($NUM+1))
	    echo `pidof ${FRED_PATH}/fred-rifd` > ${VARRUN_PATH}/fred-rifd.pid
        fi
    fi
    if check_pidfile ${VARRUN_PATH}/fred-pifd.pid; then /bin/true; else
        ${FRED_PATH}/fred-pifd ${OPTIONS}${PIFD_PORT} 2>/dev/null &
        if [ $? -eq 0 ]; then
            START_SUCCEDED=0
	    NUM=$(($NUM+1))
	    echo `pidof ${FRED_PATH}/fred-pifd` > ${VARRUN_PATH}/fred-pifd.pid
        fi
    fi
    if check_pidfile ${VARRUN_PATH}/fred-adifd.pid; then /bin/true; else
        ${FRED_PATH}/fred-adifd ${OPTIONS}${ADIFD_PORT} 2>/dev/null &
        if [ $? -eq 0 ]; then
            START_SUCCEDED=0
	    NUM=$(($NUM+1))
	    echo `pidof ${FRED_PATH}/fred-adifd` > ${VARRUN_PATH}/fred-adifd.pid
        fi
    fi
    if [ $START_SUCCEDED -eq 0 -a $NUM -eq 4 ]; then
        log_success_msg "${MSG_START}"
    else
	log_failure_msg "${MSG_START}"
    fi
}

check_server_status() {
    echo -n "$1 is ";
    if check_pidfile $2
    then
        echo "running"
    else
        echo "stopped"
    fi
}

fred_status() {
    check_server_status "fred-pyfred" "${VARRUN_PATH}/pyfred.pid"
    check_server_status "fred-rifd" "${VARRUN_PATH}/fred-rifd.pid"
    check_server_status "fred-pifd" "${VARRUN_PATH}/fred-pifd.pid"
    check_server_status "fred-adifd" "${VARRUN_PATH}/fred-adifd.pid"
}

fred_stop() {
    STOP_SUCCEDED=1
    if [ -f ${VARRUN_PATH}/fred-rifd.pid ]
    then
        kill -TERM `cat ${VARRUN_PATH}/fred-rifd.pid` 2>/dev/null
        STOP_SUCCEDED=$(($STOP_SUCCEDED * $?))
	rm -f ${VARRUN_PATH}/fred-rifd.pid
    fi
    if [ -f ${VARRUN_PATH}/fred-pifd.pid ]
    then
	kill -TERM `cat ${VARRUN_PATH}/fred-pifd.pid` 2>/dev/null
        STOP_SUCCEDED=$(($STOP_SUCCEDED * $?))
	rm -f ${VARRUN_PATH}/fred-pifd.pid
    fi
    if [ -f ${VARRUN_PATH}/fred-adifd.pid ]
    then
	kill -TERM `cat ${VARRUN_PATH}/fred-adifd.pid` 2>/dev/null
        STOP_SUCCEDED=$(($STOP_SUCCEDED * $?))
	rm -f ${VARRUN_PATH}/fred-adifd.pid
    fi
    @BINDIR@/pyfredctl stop > /dev/null
    STOP_SUCCEDED=$(($STOP_SUCCEDED * $?))
    if [ $STOP_SUCCEDED -eq 0 ]
    then
        log_success_msg "${MSG_STOP}"
    else
        log_failure_msg "${MSG_STOP}"
    fi
}

case "$1" in
    start)
	fred_start
        ;;
    restart)
	fred_stop
	fred_start
        ;;
    stop)
	fred_stop
        ;;
    status)
        fred_status
        ;;
    *)
	echo -n "Usage: @SYSCONFDIR@/init.d/fred-server "
	echo "{start|stop|restart|status}"
	exit 1
esac

exit 0
